dnl -*- html -*-
define(__timestamp, 2006-03-22T11:36:40Z)dnl
define(__title, `new rails,  now with a rake gotcha')dnl
define(__id, 41)dnl
include(header.html)
<p>Well,  there's a release candidate for Rails 1.1 now. Being a good... err... Rails person... I went ahead and did a <kbd>rake freeze_edge</kbd>. I was rewarded with something like this: </p> <blockquote style='font-family:  monospace;'>$ script/server<br /> => Booting lighttpd (use 'script/server webrick' to force WEBrick)<br /> ./script/../config/../vendor/rails/railties/lib/commands/../tasks/tmp.rake: 1: <br /> &nbsp; &nbsp; undefined method `namespace' for main: Object (NoMethodError)<br /> &nbsp; from ./script/../config/../vendor/rails/activesupport<br /> &nbsp; &nbsp; /lib/active_support/dependencies.rb: 142: in `load'<br /> &nbsp; from ./script/../config/../vendor/rails/railties/lib/commands/server.rb: 29<br /> &nbsp; from script/server: 3</blockquote> <p>I know,  you're probably thinking to yourself "Good grief,  did he forget to update rake to 0.7? It's mentioned in the release notes,  the blog posting,  and everywhere else." The thing is,  you can get this error even if you've done a <kbd>gem install rake</kbd>. (Strange,  but true!) Since <kbd>freeze_edge</kbd> puts everything in <kbd>vendor/</kbd>,  it doesn't use gems. Since it doesn't use gems,  it will try to use whatever rake is installed on your system through your package manager. (Thanks to danp from #caboose for pointing this out.) The best thing to do is to just get rid of the non-gem rake and rely only on the gem one.</p>  <p><b>Update</b>:  I was also having all my tests fail when running the <kbd>freeze_edge</kbd> version,  but the problems went away when I did the regular <kbd>gem install rails --source http://gems.rubyonrails.org</kbd>. I know that's not practical for everyone,  but seems to be the most trouble-free way if you can do it.</p>
include(footer.html)
