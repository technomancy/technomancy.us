<?xml version="1.0" encoding="UTF-8"?>

<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <title>Technomancy</title>
  <id>tag:technomancy.us,2007:blog/</id>
  <link href="http://technomancy.us/feed/atom" rel="self" type="application/atom+xml"/>
  <link href="http://technomancy.us/" rel="alternate" type="text/html"/>
  <updated>2018-01-13T03:54:21Z</updated>

  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20the%20cost%20of%20structured%20data%20is%20reduced</id>
    <published>2018-01-12T19:53:51Z</published>
    <updated>2018-01-12T19:53:51Z</updated>

    <link href="http://technomancy.us/185" rel="alternate" type="text/html"/>
    <title>in which the cost of structured data is reduced</title>
    <content type="html">
      &lt;p&gt;Last year I got the wonderful opportunity to
  attend &lt;a href=&quot;https://con.racket-lang.org/&quot;&gt;RacketCon&lt;/a&gt; as it
  was hosted only 30 minutes away from my home. The two-day
  conference had a number of great talks on the first day, but what
  really impressed me was the fact that the entire second day was
  spent focusing on contribution. The day started out with a few 15-
  to 20-minute talks about how to contribute to a specific codebase
  (including that of Racket itself), and after that people just
  split off into groups focused around specific codebases. Each
  table had maintainers helping guide other folks towards how to
  work with the codebase and construct effective patch
  submissions.&lt;/p&gt;

&lt;img src=&quot;/i/chronicles-of-lensmen.jpg&quot; alt=&quot;lensmen chronicles&quot; class=&quot;right&quot;&gt;

&lt;p&gt;I came away from the conference with a great sense of
  appreciation for how friendly and welcoming the Racket community
  is, and how great Racket is as a swiss-army-knife type tool for
  quick tasks. (Not that it&#39;s unsuitable for large projects, but I
  don&#39;t have the opportunity to start any new large projects very
  frequently.)&lt;/p&gt;

&lt;p&gt;The other day I wanted to generate colored maps of
  the world by categorizing countries interactively, and Racket
  seemed like it would fit the bill nicely. The job is simple: show
  an image of the world with one country selected; when a key is
  pressed, categorize that country, then show the map again with
  all categorized countries colored, and continue with the next
  country selected.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I have yet to see a language/framework more accessible and
  straightforward out of the box for
  drawing&lt;sup&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Here&#39;s the entry point
  which sets up state and then constructs a canvas that handles key
  input and display:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;function-name&quot;&gt;main&lt;/span&gt; path)
  (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ([&lt;span class=&quot;variable-name&quot;&gt;frame&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;new&lt;/span&gt; frame% [label &lt;span class=&quot;string&quot;&gt;&quot;World color&quot;&lt;/span&gt;])]
        [&lt;span class=&quot;variable-name&quot;&gt;categorizations&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;box&lt;/span&gt; &#39;())]
        [&lt;span class=&quot;variable-name&quot;&gt;doc&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;call-with-input-file&lt;/span&gt; path read-xml/document)])
    (&lt;span class=&quot;builtin&quot;&gt;new&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;class&lt;/span&gt; canvas%
           (&lt;span class=&quot;builtin&quot;&gt;define/override&lt;/span&gt; (&lt;span class=&quot;function-name&quot;&gt;on-char&lt;/span&gt; event)
             (handle-key &lt;span class=&quot;builtin&quot;&gt;this&lt;/span&gt; categorizations (&lt;span class=&quot;builtin&quot;&gt;send&lt;/span&gt; event get-key-code)))
           (&lt;span class=&quot;builtin&quot;&gt;super-new&lt;/span&gt;))
         [parent frame]
         [paint-callback (draw doc categorizations)])
    (&lt;span class=&quot;builtin&quot;&gt;send&lt;/span&gt; frame show &lt;span class=&quot;racket-selfeval&quot;&gt;#t&lt;/span&gt;)))&lt;/pre&gt;

&lt;p&gt;While the class system is not one of my favorite things about
  Racket (most newer code seems to avoid it in favor
  of &lt;a href=&quot;https://docs.racket-lang.org/reference/struct-generics.html&quot;&gt;generic
  interfaces&lt;/a&gt; in the rare case that polymorphism is truly called
  for), the fact that classes can be constructed in a light-weight,
  anonymous way makes it much less onerous than it could be. This
  code sets up all mutable state in
  a &lt;a href=&quot;https://docs.racket-lang.org/reference/boxes.html?q=box#%28def._%28%28quote._~23~25kernel%29._box%29%29&quot;&gt;&lt;tt&gt;box&lt;/tt&gt;&lt;/a&gt;
  which you use in the way you&#39;d use a &lt;tt&gt;ref&lt;/tt&gt; in ML or
  Clojure: a mutable wrapper around an immutable data structure.&lt;/p&gt;

&lt;p&gt;The world map I&#39;m using
  is &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:BlankMap-World_gray.svg&quot;&gt;an
  SVG of the Robinson projection&lt;/a&gt; from Wikipedia. If you look
  closely there&#39;s a call to bind &lt;tt&gt;doc&lt;/tt&gt; that
  calls &lt;a href=&quot;https://docs.racket-lang.org/reference/port-lib.html#(def._((lib._racket%2Fport..rkt)._call-with-input-string))&quot;&gt;&lt;tt&gt;call-with-input-file&lt;/tt&gt;&lt;/a&gt;
  with &lt;a href=&quot;https://docs.racket-lang.org/xml/index.html?q=read-xml#%28def._%28%28lib._xml%2Fmain..rkt%29._read-xml%2Fdocument%29%29&quot;&gt;&lt;tt&gt;read-xml/document&lt;/tt&gt;&lt;/a&gt; which loads up the whole map
  file&#39;s SVG; just about as easily as you could ask for.&lt;/p&gt;

&lt;p&gt;The data you get back from &lt;tt&gt;read-xml/document&lt;/tt&gt; is in fact
  a &lt;a href=&quot;https://docs.racket-lang.org/xml/#%28def._%28%28lib._xml%2Fmain..rkt%29._document%29%29&quot;&gt;document&lt;/a&gt;
  struct, which contains an &lt;tt&gt;element&lt;/tt&gt; struct
  containing &lt;tt&gt;attribute&lt;/tt&gt; structs and lists of
  more &lt;tt&gt;element&lt;/tt&gt; structs. All very sensible, but maybe not
  what you would expect in other dynamic languages like Clojure or
  Lua where free-form maps reign supreme. Racket really wants
  structure to be known up-front when possible, which is one of the
  things that help it produce helpful error messages when things
  go wrong.&lt;/p&gt;

&lt;p&gt;Here&#39;s how we handle keyboard input; we&#39;re displaying a map with
  one country highlighted, and &lt;tt&gt;key&lt;/tt&gt; here tells us what
  the user pressed to categorize the highlighted country. If that
  key is in the &lt;tt&gt;categories&lt;/tt&gt; hash then we put it
  into &lt;tt&gt;categorizations&lt;/tt&gt;.&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;categories&lt;/span&gt; #hash((select . &lt;span class=&quot;string&quot;&gt;&quot;eeeeff&quot;&lt;/span&gt;)
                         (&lt;span class=&quot;racket-selfeval&quot;&gt;#\1&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&quot;993322&quot;&lt;/span&gt;)
                         (&lt;span class=&quot;racket-selfeval&quot;&gt;#\2&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&quot;229911&quot;&lt;/span&gt;)
                         (&lt;span class=&quot;racket-selfeval&quot;&gt;#\3&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&quot;ABCD31&quot;&lt;/span&gt;)
                         (&lt;span class=&quot;racket-selfeval&quot;&gt;#\4&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&quot;91FF55&quot;&lt;/span&gt;)
                         (&lt;span class=&quot;racket-selfeval&quot;&gt;#\5&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&quot;2439DF&quot;&lt;/span&gt;)))

(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;function-name&quot;&gt;handle-key&lt;/span&gt; canvas categorizations key)
  (&lt;span class=&quot;keyword&quot;&gt;cond&lt;/span&gt; [(&lt;span class=&quot;builtin&quot;&gt;equal?&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;#\backspace&lt;/span&gt; key) &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;undo
&lt;/span&gt;         (swap! categorizations &lt;span class=&quot;builtin&quot;&gt;cdr&lt;/span&gt;)]
        [(&lt;span class=&quot;builtin&quot;&gt;member&lt;/span&gt; key (&lt;span class=&quot;builtin&quot;&gt;dict-keys&lt;/span&gt; categories)) &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;categorize
&lt;/span&gt;         (swap! categorizations (&lt;span class=&quot;builtin&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;builtin&quot;&gt;cons&lt;/span&gt; key))]
        [(&lt;span class=&quot;builtin&quot;&gt;equal?&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;#\space&lt;/span&gt; key) &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;print state
&lt;/span&gt;         (&lt;span class=&quot;builtin&quot;&gt;display&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;unbox&lt;/span&gt; categorizations))])
  (&lt;span class=&quot;builtin&quot;&gt;send&lt;/span&gt; canvas refresh))&lt;/pre&gt;

&lt;p&gt;Finally once we have a list of categorizations, we need to apply
  it to the map document and display. We apply
  a &lt;a href=&quot;https://docs.racket-lang.org/reference/for.html?q=for%2Ffold#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29&quot;&gt;&lt;tt&gt;fold&lt;/tt&gt;&lt;/a&gt;
  reduction over the XML document struct and the list of country
  categorizations (plus &lt;tt&gt;&#39;select&lt;/tt&gt; for the country that&#39;s
  selected to be categorized next) to get back a &quot;modified&quot; document
  struct where the proper elements have the style attributes applied
  for the given categorization, then we turn it into an image and
  hand it
  to &lt;a href=&quot;https://docs.racket-lang.org/pict/Rendering.html?q=draw-pict#%28def._%28%28lib._pict%2Fmain..rkt%29._draw-pict%29%29&quot;&gt;&lt;tt&gt;draw-pict&lt;/tt&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;function-name&quot;&gt;update&lt;/span&gt; original-doc categorizations)
  (&lt;span class=&quot;keyword&quot;&gt;for/fold&lt;/span&gt; ([doc original-doc])
            ([category (&lt;span class=&quot;builtin&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;select&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;unbox&lt;/span&gt; categorizations))]
             [n (&lt;span class=&quot;keyword&quot;&gt;in-range&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;length&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;unbox&lt;/span&gt; categorizations)) &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;-1&lt;/span&gt;)])
    (set-style doc n (style-for category))))

(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ((&lt;span class=&quot;function-name&quot;&gt;draw&lt;/span&gt; doc categorizations) _ context)
  (&lt;span class=&quot;keyword&quot;&gt;let*&lt;/span&gt; ([&lt;span class=&quot;variable-name&quot;&gt;newdoc&lt;/span&gt; (update doc categorizations)]
         [&lt;span class=&quot;variable-name&quot;&gt;xml&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;call-with-output-string&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;curry&lt;/span&gt; write-xml newdoc))])
    (draw-pict (&lt;span class=&quot;builtin&quot;&gt;call-with-input-string&lt;/span&gt; xml svg-port-&amp;gt;pict) context &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt;)))&lt;/pre&gt;

&lt;p&gt;The problem is in that pesky &lt;tt&gt;set-style&lt;/tt&gt; function. All it
  has to do is reach deep down into the &lt;tt&gt;document&lt;/tt&gt; struct to
  find the &lt;tt&gt;n&lt;/tt&gt;th &lt;tt&gt;path&lt;/tt&gt; element (the one associated
  with a given country), and change its &lt;tt&gt;&#39;style&lt;/tt&gt;
  attribute. It ought to be a simple task. Unfortunately this
  function ends up being anything but simple:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; you don&#39;t need to understand this; just grasp how huge/awkward it is&lt;/span&gt;
(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;function-name&quot;&gt;set-style&lt;/span&gt; doc n new-style)
  (&lt;span class=&quot;keyword&quot;&gt;let*&lt;/span&gt; ([&lt;span class=&quot;variable-name&quot;&gt;root&lt;/span&gt; (document-element doc)]
         [&lt;span class=&quot;variable-name&quot;&gt;g&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;list-ref&lt;/span&gt; (element-content root) &lt;span class=&quot;racket-selfeval&quot;&gt;8&lt;/span&gt;)]
         [&lt;span class=&quot;variable-name&quot;&gt;paths&lt;/span&gt; (element-content g)]
         [&lt;span class=&quot;variable-name&quot;&gt;path&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;first&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;drop&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;filter&lt;/span&gt; element? paths) n))]
         [&lt;span class=&quot;variable-name&quot;&gt;path-num&lt;/span&gt; (list-index (&lt;span class=&quot;builtin&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;builtin&quot;&gt;eq?&lt;/span&gt; path) paths)]
         [&lt;span class=&quot;variable-name&quot;&gt;style-index&lt;/span&gt; (list-index (&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; (x) (&lt;span class=&quot;builtin&quot;&gt;eq?&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;style&lt;/span&gt; (attribute-name x)))
                                  (element-attributes path))]
         [&lt;span class=&quot;variable-name&quot;&gt;attr&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;list-ref&lt;/span&gt; (element-attributes path) style-index)]
         [&lt;span class=&quot;variable-name&quot;&gt;new-attr&lt;/span&gt; (make-attribute (source-start attr)
                                   (source-stop attr)
                                   (attribute-name attr)
                                   new-style)]
         [&lt;span class=&quot;variable-name&quot;&gt;new-path&lt;/span&gt; (make-element (source-start path)
                                 (source-stop path)
                                 (element-name path)
                                 (&lt;span class=&quot;builtin&quot;&gt;list-set&lt;/span&gt; (element-attributes path)
                                           style-index new-attr)
                                 (element-content path))]
         [&lt;span class=&quot;variable-name&quot;&gt;new-g&lt;/span&gt; (make-element (source-start g)
                              (source-stop g)
                              (element-name g)
                              (element-attributes g)
                              (&lt;span class=&quot;builtin&quot;&gt;list-set&lt;/span&gt; paths path-num new-path))]
         [&lt;span class=&quot;variable-name&quot;&gt;root-contents&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;list-set&lt;/span&gt; (element-content root) &lt;span class=&quot;racket-selfeval&quot;&gt;8&lt;/span&gt; new-g)])
    (make-document (document-prolog doc)
                   (make-element (source-start root)
                                 (source-stop root)
                                 (element-name root)
                                 (element-attributes root)
                                 root-contents)
                   (document-misc doc))))&lt;/pre&gt;

&lt;p&gt;The reason for this is that while structs are immutable, they
  don&#39;t support functional updates. Whenever you&#39;re working with
  immutable data structures, you want to be able to say &quot;give me a
  new version of this data, but with field &lt;tt&gt;x&lt;/tt&gt; replaced by
  the value of &lt;tt&gt;(f (lookup x))&lt;/tt&gt;&quot;. Racket
  can &lt;a href=&quot;https://docs.racket-lang.org/reference/dicts.html?q=dict-update#%28def._%28%28lib._racket%2Fdict..rkt%29._dict-update%29%29&quot;&gt;do
  this with dictionaries&lt;/a&gt; but not with structs&lt;sup&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.  If you want a
  modified version you have to create a fresh
  one&lt;sup&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;img src=&quot;/i/first-lensman.jpg&quot; alt=&quot;first lensman&quot; align=&quot;left&quot;&gt;

&lt;p&gt;When I brought this up in the &lt;tt&gt;#racket&lt;/tt&gt; channel on
  Freenode, I was helpfully pointed to the 3rd-party
  &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-guide.html&quot;&gt;Lens&lt;/a&gt;
  library. Lenses are a general-purpose way of composing arbitrarily
  nested lookups and updates. Unfortunately at this time
  there&#39;s &lt;a href=&quot;https://github.com/jackfirth/lens/issues/290&quot;&gt;a
  flaw&lt;/a&gt; preventing them from working with &lt;tt&gt;xml&lt;/tt&gt; structs, so
  it seemed I was out of luck.&lt;/p&gt;

&lt;p&gt;But then I was pointed
  to &lt;a href=&quot;https://docs.racket-lang.org/pollen/second-tutorial.html?q=xexpr#%28part._.X-expressions%29&quot;&gt;X-expressions&lt;/a&gt;
  as an alternative to
  structs. The &lt;a href=&quot;https://docs.racket-lang.org/xml/index.html?q=xexpr#%28def._%28%28lib._xml%2Fmain..rkt%29._xml-~3exexpr%29%29&quot;&gt;&lt;tt&gt;xml-&gt;xexpr&lt;/tt&gt;&lt;/a&gt;
  function turns the structs into a deeply-nested list tree with
  symbols and strings in it. The tag is the first item in the list,
  followed by an associative list of attributes, then the element&#39;s
  children. While this gives you fewer up-front guarantees about the
  structure of the data, it does work around the lens issue.&lt;/p&gt;

&lt;p&gt;For this to work, we need to compose a new lens based on the
  &quot;path&quot; we want to use to drill down into the &lt;tt&gt;n&lt;/tt&gt;th country
  and its &lt;tt&gt;style&lt;/tt&gt;
  attribute. The &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-reference.html#%28def._%28%28lib._lens%2Fcommon..rkt%29._lens-compose%29%29&quot;&gt;&lt;tt&gt;lens-compose&lt;/tt&gt;&lt;/a&gt;
  function lets us do that. Note that the order here might be
  backwards from what you&#39;d expect; it works deepest-first (the way
  &lt;a href=&quot;https://docs.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._compose%29%29&quot;&gt;&lt;tt&gt;compose&lt;/tt&gt;&lt;/a&gt;
  works for functions). Also note that defining one lens gives us
  the ability to both get nested values
  (with &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-reference.html?q=lens-view#%28def._%28%28lib._lens%2Fcommon..rkt%29._lens-view%29%29&quot;&gt;&lt;tt&gt;lens-view&lt;/tt&gt;&lt;/a&gt;) &lt;em&gt;and&lt;/em&gt; update them.&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;function-name&quot;&gt;style-lens&lt;/span&gt; n)
  (lens-compose (dict-ref-lens &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;style&lt;/span&gt;)
                second-lens
                (list-ref-lens (&lt;span class=&quot;builtin&quot;&gt;add1&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;*&lt;/span&gt; n &lt;span class=&quot;racket-selfeval&quot;&gt;2&lt;/span&gt;)))
                (list-ref-lens &lt;span class=&quot;racket-selfeval&quot;&gt;10&lt;/span&gt;)))&lt;/pre&gt;

&lt;p&gt;Our &lt;tt&gt;&amp;lt;path&amp;gt;&lt;/tt&gt; XML elements are under the 10th item of
  the root xexpr, (hence the &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-reference.html?q=lens-view#%28def._%28%28lib._lens%2Fdata%2Flist..rkt%29._list-ref-lens%29%29&quot;&gt;&lt;tt&gt;list-ref-lens&lt;/tt&gt;&lt;/a&gt; with 10) and
  they are interspersed with whitespace, so we have to
  double &lt;tt&gt;n&lt;/tt&gt; to find the &lt;tt&gt;&amp;lt;path&amp;gt;&lt;/tt&gt; we
  want. The &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-reference.html?q=lens-view#%28def._%28%28lib._lens%2Fdata%2Flist..rkt%29._second-lens%29%29&quot;&gt;&lt;tt&gt;second-lens&lt;/tt&gt;&lt;/a&gt; call gets us to that element&#39;s
  attribute alist, and &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-reference.html?q=lens-view#%28def._%28%28lib._lens%2Fdata%2Fdict..rkt%29._dict-ref-lens%29%29&quot;&gt;&lt;tt&gt;dict-ref-lens&lt;/tt&gt;&lt;/a&gt; lets us zoom in on
  the &lt;tt&gt;&#39;style&lt;/tt&gt; key out of that alist.&lt;/p&gt;

&lt;p&gt;Once we have our lens, it&#39;s just a matter of
  replacing &lt;tt&gt;set-style&lt;/tt&gt; with a call
  to &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-reference.html?q=lens-view#%28def._%28%28lib._lens%2Fcommon..rkt%29._lens-set%29%29&quot;&gt;&lt;tt&gt;lens-set&lt;/tt&gt;&lt;/a&gt;
  in our &lt;tt&gt;update&lt;/tt&gt; function we had above, and then we&#39;re
  off:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; (&lt;span class=&quot;function-name&quot;&gt;update&lt;/span&gt; doc categorizations)
  (&lt;span class=&quot;keyword&quot;&gt;for/fold&lt;/span&gt; ([d doc])
            ([category (&lt;span class=&quot;builtin&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;select&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;unbox&lt;/span&gt; categorizations))]
             [n (&lt;span class=&quot;keyword&quot;&gt;in-range&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;length&lt;/span&gt; (&lt;span class=&quot;builtin&quot;&gt;unbox&lt;/span&gt; categorizations)) &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;-1&lt;/span&gt;)])
    (lens-set (style-lens n) d (&lt;span class=&quot;builtin&quot;&gt;list&lt;/span&gt; (style-for category)))))&lt;/pre&gt;

&lt;img src=&quot;/i/second-stage-lensman.jpg&quot; alt=&quot;second stage lensman&quot; class=&quot;right&quot;&gt;

&lt;p&gt;Often times the trade-off between freeform maps/hashes vs
  structured data feels like one of convenience vs long-term
  maintainability. While it&#39;s unfortunate that they can&#39;t be used
  with the &lt;tt&gt;xml&lt;/tt&gt; structs&lt;sup&gt;&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;,
  lenses provide a way to get the best of both worlds, at least in
  some situations.&lt;/p&gt;

&lt;p&gt;The final version of the code clocks in at 51 lines and is
  is available &lt;a href=&quot;https://gitlab.com/technomancy/world-color/blob/master/world-color.rkt&quot;&gt;on GitLab&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] The &lt;a href=&quot;https://love2d.org&quot;&gt;LÖVE&lt;/a&gt;
  framework is the closest thing, but it doesn&#39;t have the same
  support for images as a first-class data type that works in the repl.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] If you&#39;re defining your own structs, you
  can make
  them &lt;a href=&quot;https://github.com/technomancy/cooper/blob/master/cooper/fstruct.rkt#L26&quot;&gt;implement
  the dictionary interface&lt;/a&gt;, but with the &lt;tt&gt;xml&lt;/tt&gt; library we
  have to use the struct definitions provided us.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn3&quot;&gt;3&lt;/a&gt;] Technically you can use
  the &lt;a href=&quot;https://docs.racket-lang.org/reference/struct-copy.html&quot;&gt;&lt;tt&gt;struct-copy&lt;/tt&gt;&lt;/a&gt;
  function, but it&#39;s not that much better. The field names must be
  provided at compile-time, and it&#39;s no more efficient as it copies
  the entire contents instead of sharing internal structure. And it
  still doesn&#39;t have an API that allows you to express the new value as a
  function of the old value.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn4&quot;&gt;4&lt;/a&gt;]
  Lenses &lt;a href=&quot;https://docs.racket-lang.org/lens/lens-reference.html#(form._((lib._lens%2Fdata%2Fstruct..rkt)._define-struct-lenses))&quot;&gt;work
  with most regular structs&lt;/a&gt; as long as they
  are &lt;a href=&quot;https://docs.racket-lang.org/guide/define-struct.html?q=transparent%20structs#%28part._trans-struct%29&quot;&gt;transparent&lt;/a&gt;
  and don&#39;t use subtyping. Subtyping and opaque structs are
  generally considered bad form in modern Racket, but you do find
  older libraries that use them from time to time.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20a%20path%20is%20charted%20through%20the%20coming%20apocalypse</id>
    <published>2017-10-23T19:04:13Z</published>
    <updated>2017-10-23T19:04:13Z</updated>

    <link href="http://technomancy.us/184" rel="alternate" type="text/html"/>
    <title>in which a path is charted through the coming apocalypse</title>
    <content type="html">
      &lt;p&gt;I&#39;ve long counted myself among the grumpy old-timers who
  grudgingly accept the shift towards web-based-everything and just
  try to make the most of it, wistfully remembering the days when I
  could just do everything from within Emacs. One of my core
  survival strategies in this web-first world has been to trick my
  browser into at least having the decency to pretend to be Emacs. I
  accomplished this in Firefox&lt;sup&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; with
  the &lt;a href=&quot;https://github.com/mooz/keysnail/wiki&quot;&gt;Keysnail&lt;/a&gt;
  extension. Keysnail has remarkable flexibility in how it overrides
  Firefox&#39;s default key bindings to match those of Emacs, and
  everything has been more or less great.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;a href=&quot;https://blog.mozilla.org/addons/2016/11/23/add-ons-in-2017/&quot;&gt;a
  soon-to-be-released update to Firefox&lt;/a&gt; will remove the
  extension
  mechanism &lt;a href=&quot;https://github.com/mooz/keysnail/issues/222&quot;&gt;used
  by Keysnail&lt;/a&gt;.&lt;/p&gt;

&lt;img src=&quot;/i/green-lake-laptop.jpg&quot; alt=&quot;laptop at Green Lake&quot; /&gt;

&lt;p&gt;I have felt very conflicted about this, because the old state of
  affairs is admittedly untenable. Firefox currently
  uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Gecko&quot;&gt;Gecko&lt;/a&gt;,
  a decades-old rendering engine written in C++, and like much
  software written in C++ it has a pretty distressing security track
  record. Version 57 of Firefox replaces parts of Gecko with
  functionality from &lt;a href=&quot;https://servo.org&quot;&gt;Servo&lt;/a&gt;, a
  browser engine implemented in the Rust programming language. Most
  of the bugs in Gecko which have led to embarrassing security flaws
  are simply impossible in Servo. The fact
  that so much safety-critical code is still being written in C++
  and similar languages is a sad state of affairs, and we should
  celebrate changes that mean end users will no longer bear the penalty
  for programmers&#39; reluctance to move beyond the technology of the
  1980s.&lt;/p&gt;

&lt;p&gt;But on the other hand, losing the ability to shape your computing
  environment to your whims is &lt;em&gt;awful&lt;/em&gt;. I lost track of how
  many times (when using Chromium or other keysnail-less browsers)
  I&#39;ve wanted to throw my laptop out the window when I held
  down &lt;kbd&gt;ctrl-n&lt;/kbd&gt; to scroll down and it opened seventeen new
  windows instead. I can&#39;t remember ever wanting to open a new browser
  window in the past &lt;em&gt;decade&lt;/em&gt;; why should I be stuck with a
  key bound to that command and no way to disable it?&lt;/p&gt;

&lt;p&gt;Of course, the new Firefox will still have an extension
  mechanism, but it&#39;s a pale shadow of the old one. Citing the
  flimsy&lt;sup&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; excuse
  of &lt;a href=&quot;https://github.com/lusakasa/saka-key/issues/53#issuecomment-332319791&quot;&gt;security&lt;/a&gt;,
  key bindings like &lt;kbd&gt;C-n&lt;/kbd&gt; are hard-coded into the browser
  and forbidden from being overridden.&lt;/p&gt;

&lt;img src=&quot;/i/tumwater.jpg&quot; alt=&quot;Tumwater Falls&quot; align=&quot;left&quot; /&gt;

&lt;p&gt;Things were looking bleak for me, and I contemplated whether I
  would switch to curl or just give up software development
  altogether for a career in goat-herding. I ended up finding a
  solution from a most unlikely place.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I had heard of &lt;a href=&quot;https://github.com/ch11ng/exwm&quot;&gt;EXWM&lt;/a&gt;
  a while ago, and it struck me as a quixotic curiosity. The X
  Window System uses a network socket for its control protocol,
  allowing a lot of flexibility including native forwarding of
  interfaces for remote programs. The developer of EXWM had taken an
  XML description of the specification for the network protocol and
  written a compiler to turn it
  into &lt;a href=&quot;https://github.com/ch11ng/xelb/blob/master/xelb.el#L36&quot;&gt;a
  library of Emacs Lisp functions&lt;/a&gt; which he then used to
  implement a window manager in pure Emacs Lisp. While I admired the
  chutzpah this must have taken, I assumed it was a novelty that
  could never be practical.&lt;/p&gt;

&lt;p&gt;Eventually the Firefox conundrum prompted me to give it a second
  look due to a feature called Simulation
  Keys. The &lt;tt&gt;exwm-input-set-simulation-keys&lt;/tt&gt; function allows
  you to define a translation mapping so that a certain key
  combination will be intercepted by EXWM when a non-Emacs program
  has focus, and a different set of key input events will be sent
  instead. It seemed too good to be true; I could let go of Keysnail
  and instead get the same features applied to every program I
  use&lt;sup&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m happy to report that EXWM does actually function startlingly
  well as a window manager. The simulation keys feature is amazing
  and puts my Firefox-related fears at ease, and having all
  configuration written in a single language simplifies my setup
  dramatically. Every X window you launch is given an Emacs buffer,
  and all your normal splits and window resizing commands work
  great with it. With the tiling window managers I used in the
  past, it was so unusual for me to use something other than the
  &quot;one fullscreen window per display&quot; setup that I would often
  forget the key bindings for splitting and rearranging
  windows. EXWM even integrates &quot;system tray&quot; programs into the Emacs
  echo area, so your wifi connect tool shows up unobtrusively in
  the bottom right corner.&lt;/p&gt;

&lt;p&gt;There are a handful of gotchas. Emacs Lisp lacks general-purpose
  concurrency features, but it does allow for concurrency when
  dealing with subprocesses and network communication. Most
  well-written Emacs Lisp will never block the main event loop,
  which is good because when using EXWM that means the entire window
  manager is stuck until the blocking operation completes. I only
  came across two exceptions to this rule. One of them
  is &lt;tt&gt;smtpmail-send-it&lt;/tt&gt;, which can be replaced by
  the &lt;a href=&quot;https://github.com/jwiegley/emacs-async/blob/master/smtpmail-async.el&quot;&gt;smtpmail-async&lt;/a&gt;
  library. The other is the &lt;tt&gt;racket-run&lt;/tt&gt; command, which I was
  able
  to &lt;a href=&quot;https://github.com/greghendershott/racket-mode/pull/282&quot;&gt;patch
  in about an hour&lt;/a&gt; to remove the blocking
  call&lt;sup&gt;&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Other folks might run into more problems if they use other
  third-party libraries which don&#39;t take care to use the network
  functions properly. But for my use&lt;sup&gt;&lt;a href=&quot;#fn5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;,
  it&#39;s been very smooth, and I&#39;m thrilled to have it.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: I&#39;ve
  started &lt;a href=&quot;http://p.hagelb.org/exwm-ff-tabs.html&quot;&gt;configuring my
  browser to open everything in new windows instead of new tabs&lt;/a&gt;,
  which sounds crazy, but is very useful, because it means that you
  can use Emacs&#39;s built-in buffer switching tools to change tabs,
  which are much better than anything I&#39;ve seen inside a browser.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] I used &lt;a href=&quot;http://conkeror&quot;&gt;Conkeror&lt;/a&gt;
  for several years, but eventually things got to the point where
  browsing without &lt;a href=&quot;https://noscript.net&quot;&gt;Noscript&lt;/a&gt;
  became untenable, and I could never get the two to work well together.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] The rationale of &quot;it&#39;s for security&quot; would
  stand up to a little more scrutiny if it weren&#39;t for the fact that
  extensions &lt;em&gt;can&lt;/em&gt; rebind &lt;kbd&gt;C-t&lt;/kbd&gt;, a key which is used
  hundreds if not thousands of times more often than &lt;kbd&gt;C-n&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn3&quot;&gt;3&lt;/a&gt;]
  Granted &lt;a href=&quot;http://www.gnumeric.org/&quot;&gt;gnumeric&lt;/a&gt; is the
  only program I use outside the browser and Emacs, but it&#39;s still
  greatly appreciated. I also use
  the &lt;a href=&quot;https://key.saka.io/&quot;&gt;Saka Key&lt;/a&gt; extension, which
  implements Keysnail&#39;s ability to trigger links from the keyboard
  even if they don&#39;t have text attached to them.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn4&quot;&gt;4&lt;/a&gt;] I feel that the increasing &quot;Emacs needs
  concurrency!&quot; calls tend to overstate the problem. Yes, of course
  it would be nicer for the programmer to code using coroutines
  (coming in Emacs 26!) instead of callbacks, but in the end this is
  a convenience for the author, not for the end user.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn5&quot;&gt;5&lt;/a&gt;] &lt;a href=&quot;https://github.com/technomancy/dotfiles/blob/master/.emacs.d/phil/wm.el&quot;&gt;My
    customizations&lt;/a&gt; largely revolve around replacing
    my &lt;a href=&quot;https://github.com/technomancy/dotfiles/blob/master/.xbindkeysrc.scm&quot;&gt;xbindkeys&lt;/a&gt;
    config with elisp, mapping workspace numbers to physical
    displays, and some &lt;tt&gt;eshell&lt;/tt&gt; commands to give one eshell
    buffer per workspace. EXWM has XMonad-style workspaces where you
    can change the workspace for each display independently rather
    than forcing you to change them all at once like many more
    conventional WMs, and I&#39;m very glad it does.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20actors%20simulate%20a%20protocol</id>
    <published>2017-05-14T21:01:31Z</published>
    <updated>2017-05-14T21:01:31Z</updated>

    <link href="http://technomancy.us/183" rel="alternate" type="text/html"/>
    <title>in which actors simulate a protocol</title>
    <content type="html">
      &lt;p&gt;I&#39;ve been on a bit of a yak shave recently
  on &lt;a href=&quot;&quot;&gt;Bussard&lt;/a&gt;, my spaceflight programming adventure
  game. The game relies pretty heavily on simulating various
  computer systems, from your own craft to space stations, portals,
  rovers, and other craft. It naturally needs to simulate
  communications between all these.&lt;/p&gt;

&lt;p&gt;I started with a pretty simple method of having each connection
  spin up its own coroutine running its own sandboxed session. Space
  station sessions
  run &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/threads/os/orb/resources/smash&quot;&gt;smash&lt;/a&gt;,
  a vaguely bash-like shell in a faux-unix, while connecting to a
  portal
  triggers &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/beta-2/os/lisp/resources/portal.lsp&quot;&gt;a
  small lisp script to check for clearance and gradually activate
  the gateway sequence&lt;/a&gt;. The main loop would allow each session&#39;s
  coroutine a slice of time for each update tick, but a
  badly-behaved script could make the frame rate
  suffer. (Coroutines, you will remember, are a form
  of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cooperative_multitasking&quot;&gt;cooperative
  multitasking&lt;/a&gt;; not only do they not allow more than one thing to
  literally be running at the same time, but handing control off
  must be done explicitly.) Also input and output was
  handled in a pretty ad-hoc method where Lua tables were used as
  channels to send strings to and from these session coroutines. But
  most problematic of all was the fact that there wasn&#39;t any
  uniformity or regularity in the implementations of the various
  sessions.&lt;/p&gt;

&lt;img src=&quot;/i/bussard-rpc.png&quot; alt=&quot;Bussard shell session&quot;&gt;

&lt;p&gt;The next big feature I wanted to add was the ability to deploy
  rovers from your ship and SSH into them to control their
  movements or reprogram them. But I really didn&#39;t want to add a
  third half-baked session type; I needed all the different implementations
  to conform to a single interface. This required some rethinking.&lt;/p&gt;

&lt;p&gt;The codebase is written primarily in Lua, but not just any
  Lua&amp;mdash;it uses the &lt;a href=&quot;https://love2d.org&quot;&gt;LÖVE&lt;/a&gt;
  framework. While Lua&#39;s concurrency options are very limited,
  LÖVE offers &lt;a href=&quot;https://love2d.org/wiki/love.thread&quot;&gt;true
  OS threads&lt;/a&gt; which run independently of each other. Now of
  course LÖVE can&#39;t magically change the semantics of
  Lua&amp;mdash;these threads are technically in the same process but
  cannot communicate directly. All communication happens
  over &lt;a href=&quot;https://love2d.org/wiki/Channel&quot;&gt;channels&lt;/a&gt; (aka queues)
  which allow &lt;em&gt;copies&lt;/em&gt; of data to be shared, but not actual
  state.&lt;/p&gt;

&lt;p&gt;While these limitations could be annoying in some cases, they
  turn out to be a perfect fit for simulating communications
  between separate computer systems. Moving to threads allows for
  much more complex programs to run on stations, portals, rovers,
  etc without adversely affecting performance of the game.&lt;/p&gt;

&lt;p&gt;Each world
  has &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/threads/os/server.lua&quot;&gt;a
  server thread&lt;/a&gt; with a pair of input/output channels that gets
  started when you enter that world&#39;s star system. Upon a
  successful login, a thread is created for that specific session, which
  also gets its own &lt;tt&gt;stdin&lt;/tt&gt; channel. Input from the main
  thread&#39;s SSH client gets routed from the server thread to
  the &lt;tt&gt;stdin&lt;/tt&gt; channel of each specific session. Each OS
  implementation can provide its own implementation of what
  a &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/threads/os/orb/session.lua&quot;&gt;session
  thread&lt;/a&gt; looks like, but they all exchange stdin and stdout
  messages over channels. Interactive sessions will typically run
  a shell like &lt;tt&gt;smash&lt;/tt&gt; or a repl, and their thread parks
  on &lt;tt&gt;&lt;a href=&quot;https://love2d.org/wiki/Channel:demand&quot;&gt;stdin:demand()&lt;/a&gt;&lt;/tt&gt;, waiting until the main thread
  has some input to send along.&lt;/p&gt;

&lt;p&gt;This works great for regular input and output, but sometimes it&#39;s
  necessary for the OS thread to make state changes to tables in the
  main thread, such as
  the &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/threads/os/orb/resources/cargo&quot;&gt;cargo&lt;/a&gt;
  script for buying and selling. Time to build an RPC mechanism! I
  created &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/threads/rpcs.lua&quot;&gt;a
  whitelist table of all functions which should be exposed&lt;/a&gt; to
  code running in a session thread over RPC. Each of these is
  exposed as a shim function in the session&#39;s sandbox:&lt;/p&gt;

  &lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;function-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;add_rpc&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(sandbox, name)
   sandbox[name] = &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(...)
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;chan&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = love.thread.newChannel()
      output:push({op=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;rpc&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, fn=name, args={...}, chan=chan})
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;response&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = chan:demand()
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(response[1] == &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;_error&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;remove&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(response, 1)
         &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;unpack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(response))
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;unpack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(response)
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;When the shim function is called it sends an &lt;tt&gt;op=&quot;rpc&quot;&lt;/tt&gt;
  table with a new throwaway channel (used only for communicating
  the return value), and sends it back over the output channel. The
  main thread picks this up, looks up the function in
  the &lt;tt&gt;rpcs&lt;/tt&gt; table, and sends a message back over the
  response channel with the return value. This same RPC mechanism
  works equally well for scripts on space stations as it does for
  the portal control script, and a similar variation (but going the
  other direction) allows the SSH client to implement tab completion
  by making an RPC call to get completion targets.&lt;/p&gt;

&lt;p&gt;They&#39;re not perfect, but the mechanisms LÖVE offers for
  concurrency have been a great fit in this particular case.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20four%20pieces%20are%20placed%20in%20a%20row</id>
    <published>2017-02-12T23:15:07Z</published>
    <updated>2017-02-12T23:15:07Z</updated>

    <link href="http://technomancy.us/182" rel="alternate" type="text/html"/>
    <title>in which four pieces are placed in a row</title>
    <content type="html">
      &lt;p&gt;The other day my son and I were at a friend&#39;s house, and we were
  just on our way home. As we were leaving he saw they had the game
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Connect_Four&quot;&gt;Connect 4&lt;/a&gt;
  and asked if we could play. Since we were on our way I told him,
  &quot;We can&#39;t play the game now, but when we get home, we
  can &lt;em&gt;program&lt;/em&gt; the game, and then play that.&quot; I wasn&#39;t sure
  exactly how this would work out, but I thought we&#39;d have some fun
  on the way.&lt;/p&gt;

&lt;p&gt;This isn&#39;t the first time I&#39;ve &lt;a href=&quot;/179&quot;&gt;adapted a physical
    game to a program with my kids&lt;/a&gt;. But since then I&#39;ve
    done &lt;a href=&quot;https://gitlab.com/technomancy/liquid-runner&quot;&gt;most&lt;/a&gt;
    &lt;a href=&quot;https://gitlab.com/technomancy/cardinality&quot;&gt;of&lt;/a&gt;
    &lt;a href=&quot;https://gitlab.com/technomancy/mazes/blob/master/main.lua&quot;&gt;my&lt;/a&gt; 
    &lt;a href=&quot;https://gitlab.com/technomancy/bussard&quot;&gt;games&lt;/a&gt; using
    &lt;a href=&quot;https://love2d.org&quot;&gt;LÖVE&lt;/a&gt;, the 2D Lua game framework
    along
    with &lt;a href=&quot;https://gitlab.com/technomancy/polywell&quot;&gt;Polywell&lt;/a&gt;,
    a text editor and development tool that runs in it. Polywell is
    roughly a port of Emacs, and I&#39;ve found that the foundation it
    provides of buffers, modes, and keymaps is useful for all kinds
    of games. As a bonus, you can use the text editing features of
    Polywell to code the game from &lt;em&gt;within&lt;/em&gt; the game itself,
    which makes experimentation and reloading seamless.&lt;/p&gt;

&lt;p&gt;My son and I sat down and knocked out an implementation of
  Connect 4 pretty quickly using Polywell, and I thought it would be
  interesting to step through how it works since it can serve as a
  very succinct explanation for how to use Polywell.&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;polywell&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)

&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;board&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = { {}, {}, {}, {}, {}, {}, {} }
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;colors&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = {red={255,50,50},yellow={255,238,0}}
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;turn&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;yellow&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;We start out by loading &lt;tt&gt;&quot;polywell&quot;&lt;/tt&gt; and putting it in
  the &lt;tt&gt;e&lt;/tt&gt; local (&lt;em&gt;e&lt;/em&gt; for &lt;em&gt;editor&lt;/em&gt;). Most of the
  game state is in the &lt;tt&gt;board&lt;/tt&gt; table[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;], which has an empty
  table for each column in it. The Connect 4 board has seven columns
  in which pieces can be dropped. It&#39;s a bit unusual, but we
  represent columns as lists of pieces from the bottom up, because
  the tokens are subject to gravity and fall to the bottom of the
  column they&#39;re placed in. Finally we set up &lt;tt&gt;colors&lt;/tt&gt;
  which maps each player&#39;s color name to an RGB triplet and store
  the final bit of state (the current turn) in the &lt;tt&gt;turn&lt;/tt&gt;
  local. So far so good!&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;function-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;draw&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;()
   &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;col&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;=1,7 &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;color&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;ipairs&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(board[col]) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = col * 75, 800 - n*75
         love.graphics.setColor(colors[color])
         love.graphics.circle(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;fill&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, x, y, 30)
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;tt&gt;draw&lt;/tt&gt; function is very natural once you understand
  the unusual structure of the &lt;tt&gt;board&lt;/tt&gt;; we simply loop over
  each column with an inner loop over each piece in the column. The
  piece is represented by &lt;tt&gt;n&lt;/tt&gt;, its numeric position within
  the list of pieces, and its &lt;tt&gt;color&lt;/tt&gt;. We
  calculate &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt; from the &lt;tt&gt;col&lt;/tt&gt;
  and &lt;tt&gt;n&lt;/tt&gt; respectively and draw a colored circle for each
  piece from the bottom of the column upwards. This is basically the
  only place we use the LÖVE framework directly.&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;region&quot;&gt;e.define_mode(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;connect4&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;constant&quot;&gt;&lt;span class=&quot;region&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, {draw=draw, read_only=&lt;/span&gt;&lt;span class=&quot;constant&quot;&gt;&lt;span class=&quot;region&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;})&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Using Polywell&#39;s &lt;tt&gt;define_mode&lt;/tt&gt; function we create a
  &lt;tt&gt;&quot;connect4&quot;&lt;/tt&gt; mode which will contain all the key bindings for the
  game. Modes in Polywell are assumed to be textual unless otherwise
  specified, but since our game is graphical we pass &lt;tt&gt;nil&lt;/tt&gt; as
  the second argument because our mode does not inherit from any
  existing mode. For our third argument, we pass in our
  previously-defined &lt;tt&gt;draw&lt;/tt&gt; function as the
  mode&#39;s &lt;tt&gt;draw&lt;/tt&gt; property, overriding the default draw which
  simply displays the current mode&#39;s text. We also mark it
  as &lt;tt&gt;read_only&lt;/tt&gt; to avoid accidentally inserting any text
  into the buffer.&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;region&quot;&gt;e.bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;connect4&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;escape&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;() e.change_buffer(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;*console*&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)
e.bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;connect4&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;backspace&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;()
          &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;=1,7 &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; lume.clear(board[i]) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Polywell&#39;s &lt;tt&gt;bind&lt;/tt&gt; function allows us to attach a function
  to be called when a specific keystroke is pressed in a specific
  mode. In this case we say that &lt;tt&gt;escape&lt;/tt&gt; will switch back to
  the Lua console while &lt;tt&gt;backspace&lt;/tt&gt; will just clear each column in
  the &lt;tt&gt;board&lt;/tt&gt;.&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;key&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;=1,7 &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
   e.bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;connect4&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;tostring&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(key), &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;()
             &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;column&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = board[key]
             &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(#column &amp;gt;= 6) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(column, turn)
             turn = turn == &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;yellow&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Almost done! Here&#39;s where the meat of the game is. We loop from 1
  to 7, which is the number of columns in the game. For each column,
  we &lt;tt&gt;bind&lt;/tt&gt; that number key to a function which grabs the
  corresponding &lt;tt&gt;column&lt;/tt&gt; table from the &lt;tt&gt;board&lt;/tt&gt;. It
  checks to make sure the &lt;tt&gt;column&lt;/tt&gt; isn&#39;t full (each one can
  only hold 6 pieces) and if not it inserts the color of the current
  player into the column with &lt;tt&gt;table.insert&lt;/tt&gt;. Then it
  changes the &lt;tt&gt;turn&lt;/tt&gt; to the next player.&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;region&quot;&gt;e.open(&lt;/span&gt;&lt;span class=&quot;constant&quot;&gt;&lt;span class=&quot;region&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;*connect4*&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;connect4&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Finally it uses the &lt;tt&gt;open&lt;/tt&gt; function to create a new buffer
  named &lt;tt&gt;&quot;*connect4*&quot;&lt;/tt&gt; with &lt;tt&gt;&quot;connect4&quot;&lt;/tt&gt; mode
  active. The first argument is &lt;tt&gt;nil&lt;/tt&gt; because this buffer is
  not attached to the filesystem; it&#39;s a free-floating thing that
  doesn&#39;t get loaded or saved. You could leave this line out and
  Polywell would simply boot to a Lua console where you could
  invoke &lt;tt&gt;connect4&lt;/tt&gt; mode manually from there.&lt;/p&gt;

&lt;p&gt;And that&#39;s it! 27 lines is all it took, and me and my son were
  off to the races playing the game. While we were writing it I kept
  him involved by asking each step of the way what we should do
  next. Once I wrote the &lt;tt&gt;draw&lt;/tt&gt; function we were able to test
  it out by editing the &lt;tt&gt;board&lt;/tt&gt; table directly using Lua code
  in the console. Our first pass of the number key function simply
  called &lt;tt&gt;table.insert&lt;/tt&gt;, so once we tried it out he was able
  to point out which features were still missing, and I could ask
  leading questions which helped him piece together roughly what was
  needed to address those things.&lt;/p&gt;

&lt;p&gt;Of course there&#39;s a lot more that Polywell can do, but it doesn&#39;t
  take much code to get a simple game going. Try it for yourself;
  you might have a lot of fun.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] Lua tables can be a bit confusing since
  they&#39;re a single data structure that can act both sequentially (as
  with &lt;tt&gt;board&lt;/tt&gt; here which is basically used as a vector/array) or
  associatively (as with &lt;tt&gt;colors&lt;/tt&gt; which acts like a map). The
  thing to remember is that the sequential/associative property is
  not inherent in the table but rather part of how it&#39;s used.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20a%20surprising%20affinity%20is%20pondered</id>
    <published>2016-08-29T19:56:54Z</published>
    <updated>2016-08-29T19:56:54Z</updated>

    <link href="http://technomancy.us/181" rel="alternate" type="text/html"/>
    <title>in which a surprising affinity is pondered</title>
    <content type="html">
      &lt;p&gt;When I got started with Lua, everything about it seemed to be the
  opposite of what I would like in a language, especially coming
  from Racket, Clojure, OCaml, and Erlang. It&#39;s unabashedly
  imperative, has nils everywhere, and lacks a macro system or any
  kind of static analysis. But now after spending over a year with
  it, I&#39;ve developed a fondness for it, and the reasons are not what
  I would have expected.&lt;/p&gt;

&lt;p&gt;The most obvious strength of Lua is its relentless
  simplicity. The small number of concepts you have to keep in your
  head when writing Lua can really help you focus, and it picks just
  the right concepts to build on[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;]. For
  instance, the module system is largely just constructed out of
  tables and closures. What more do you need? It brings to mind the
  simplicity of Scheme and its &quot;perfection is achieved when there is
  nothing left to remove&quot; philosophy, but I believe Scheme&#39;s
  insistence on lists as the fundamental data type actually does a
  great disservice&amp;mdash;fitting sequential data into an associative
  data type is much more natural than going the other way around[&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;There are two advanced features which can be confusing:
  metatables and coroutines. But when used judiciously, these can
  allow you to overcome the limitations of normal tables and
  functions in ways that feel seamless, like the
  way &lt;a href=&quot;http://leafo.net/posts/itchio-and-coroutines.html&quot;&gt;itch.io
  uses coroutines to hide the fact that many of its functions use
  asynchronous I/O&lt;/a&gt; and avoids structuring everything around
  callback soup.&lt;/p&gt;

&lt;p&gt;But what you most often hear touted as Lua&#39;s appeal is actually
  in its ease of embedding. Now obviously when people talk about
  this they are usually referring to how seamless it is to add the
  Lua runtime to a large C program and expose its functionality to
  code that can be written by the end user. And this is huge;
  empowering users to control your programs by doing their own
  coding pays major dividends, and here again Lua&#39;s simplicity means
  more users are likely to be able to take advantage of it. But even
  though I don&#39;t write large C programs, I found that the ability to
  embed Lua execution &lt;b&gt;inside a Lua program&lt;/b&gt; is very
  valuable.&lt;/p&gt;

&lt;p&gt;This advantage is not at all intuitive if you haven&#39;t seen it, but one
  distinguishing factor of Lua is that it allows sandboxed execution
  contexts to be constructed trivially:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;chunk&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;assert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;loadstring&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(user_code))
&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;setfenv&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(chunk, {api = &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;require&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;my.api&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)})
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; chunk()&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;In these three lines the code loaded from the &lt;tt&gt;user_code&lt;/tt&gt;
  string will run with no access to any functions outside
  the &lt;tt&gt;api&lt;/tt&gt; table you provide. (In practice you would also
  include a whitelist of pure functions for tables, strings, math,
  etc.) But that&#39;s all it takes to allow user code to run inside
  your own limited sandbox.&lt;/p&gt;

&lt;p&gt;Now Lua lacks any notion of first-class interfaces. The idea of
  passing a table in which must conform to a certain specified shape
  of fields and functions is fully ad-hoc and must be communicated
  entirely through documentation. And unfortunately it&#39;s somewhat
  unusual for Lua programmers to specify which functions in a module
  are for public consumption vs which are internal implementation
  details. But first-class sandboxes as extension points actually
  address many of the same problems as interfaces! Instead of saying
  &quot;you must provide an implementation of this interface that has
  these fields and these functions&quot; you can say &quot;Provide your own
  code here; you will have access to call only this limited subset
  of functions which we&#39;ve designated as a public API. The
  implementation details aren&#39;t even visible to you.&quot;&lt;/p&gt;

&lt;p&gt;Now this can break down badly when the sandbox doesn&#39;t
  expose enough functionality to get the job done. This is why it&#39;s
  important not to tack on &quot;scriptability&quot; as a checkbox you fulfill
  at the end, but to embrace
  &lt;a href=&quot;http://martinfowler.com/bliki/InternalReprogrammability.html&quot;&gt;internal
  reprogrammability&lt;/a&gt; from the very start. If you use the same
  methods to build the program in the first place as the end users
  use to customize it, you force yourself to be honest and to give
  the end users everything they need.&lt;/p&gt;

&lt;a href=&quot;https://www.flickr.com/photos/technomancy/28716234871/&quot;&gt;&lt;img src=&quot;/i/9and9.jpg&quot; alt=&quot;9 and 9 coffee&quot; /&gt;&lt;/a&gt;

&lt;p&gt;So from this perspective, we can agree that yes, Lua&#39;s imperative
  nature and sloppy semantics (especially around nils) put it at a
  disadvantage for large codebases vs languages that have the
  advantage of immutability and/or intelligent type systems. But the
  fact that it offers &lt;tt&gt;setfenv&lt;/tt&gt; makes it uniquely suited
  for &lt;b&gt;constructing larger codebases out of small
  codebases&lt;/b&gt;. This is the approach I take in my game
  &lt;a href=&quot;https://gitlab.com/technomancy/bussard&quot;&gt;Bussard&lt;/a&gt;, where
  I have four separate execution contexts, none of which have much
  more than 3,000 lines of code in them. Each small codebase is
  perfectly manageable on its own, and the interfaces between them
  are concise and clearly-defined despite Lua lacking first-class
  features for defining interfaces as we normally think of them.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] I have found that this simplicity also
  makes it a great choice for &lt;a href=&quot;/179&quot;&gt;teaching
  programming&lt;/a&gt;, especially to younger kids who haven&#39;t reached
  the developmental stages where they can appreciate the more
  abstract, mathematical
  approach &lt;a href=&quot;http://htdp.org&quot;&gt;espoused by Racket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] I know this method has a bad reputation
  because JavaScript and PHP do it very badly, but Lua shows it can
  be done well. There is a bit of awkwardness around ambiguity
  between array-like tables and key/value tables, but it is not
  nearly as awkward as using alists.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20a%20spacefaring%20text%20editor%20holds%20up%20against%20an%20onslaught</id>
    <published>2016-07-20T17:48:45Z</published>
    <updated>2016-07-20T17:48:45Z</updated>

    <link href="http://technomancy.us/180" rel="alternate" type="text/html"/>
    <title>in which a spacefaring text editor holds up against an onslaught</title>
    <content type="html">
      &lt;p&gt;I&#39;ve been meaning to write about my latest
  project &lt;a href=&quot;https://gitlab.com/technomancy/bussard&quot;&gt;Bussard&lt;/a&gt;
  for a while now. I describe it as a &quot;spaceflight programming
  adventure&quot;, but it might be easier to think of it as &quot;Emacs in
  space, but with a sci-fi novella in it&quot;, written in Lua with
  the &lt;a href=&quot;https://love2d.org&quot;&gt;LÖVE&lt;/a&gt; engine. There&#39;s a lot to
  tell about the game and how I want it to eventually be a way for
  newcomers to learn programming, but I want to write here about a
  particular part of the development I had a lot of fun with.&lt;/p&gt;

&lt;video src=&quot;https://p.hagelb.org/bussard-1.3.webm&quot; width=&quot;854&quot; height=&quot;480&quot;
       poster=&quot;/i/bussard-trailer.jpg&quot; controls&gt;
  &lt;a href=&quot;https://www.youtube.com/watch?v=r_gdeS3d6F8&quot;&gt;View on YouTube&lt;/a&gt;
&lt;/video&gt;

&lt;p&gt;The game is played by interacting with your ship&#39;s onboard
  computer. Naturally because I wanted to give the player the
  freedom to customize the interface as much as possible, I&#39;ve
  modeled it on Emacs. The game starts with your ship in orbit
  around a star and hoping to intercept an orbiting space station,
  but once you poke around a bit you realize that &quot;flight mode&quot; is
  only one of many modes you can activate in your onboard
  computer.&lt;/p&gt;

&lt;p&gt;Pressing &lt;kbd&gt;ctrl-o&lt;/kbd&gt; allows you to open any file in the
  in-game computer, and pressing &lt;kbd&gt;ctrl-enter&lt;/kbd&gt; opens a Lua
  repl buffer that uses the same editor infrastructure but lets
  you write code interactively and explore your ship&#39;s computer&#39;s
  API. Communicating with space station and planet port computers is
  done over an SSH client that also lives inside the editor. But all
  the various modes of the editor are configured
  with &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/master/data/src/config&quot;&gt;Lua
  code&lt;/a&gt; that runs in user-space; basically that code defines
  keyboard controls which simply invoke functions of your ship&#39;s
  computer to edit text[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;], open SSH connections, engage the ship&#39;s
  engine, etc. Every action you can take is just a Lua function
  call.&lt;/p&gt;

&lt;pre class=&quot;code&quot; style=&quot;font-size: 85%&quot;&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;bind is for commands that only call their functions once even when held.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;it takes the name of a mode, a key combo, and a function to run when pressed.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;flight&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;escape&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, ship.ui.pause)

&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;you can bind keys to existing functions or inline functions.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;flight&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;ctrl-return&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;()
        ship.editor.change_buffer(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;*console*&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;)

&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;the mouse wheel is handled just like any other key press.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;flight&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;wheelup&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, zoom_in)
bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;flight&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;wheeldown&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, zoom_out)

&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;regular tab selects next target in order of distance from the star.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;bind(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;flight&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;tab&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, ship.actions.next_target)&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;This is a fantastically flexible model for rich
  interaction&amp;mdash;it can be completely rewritten on the fly, and
  it&#39;s seamless to experiment with new ideas you think might support
  a better way of doing things. No recompiling, no restarting, just
  flow. But another benefit of the editor API is that you can call
  it against in an automated context, such
  as &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/master/tests/fuzz.lua&quot;&gt;a
    headless run&lt;/a&gt;[&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;] that
  does &lt;a href=&quot;https://en.wikipedia.org/wiki/Fuzz_testing&quot;&gt;fuzz
  tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had to make a few changes to the API for this to work nicely,
  but in the end I realized they made the system a lot more consistent
  anyway. The fuzz testing uncovered a nice set of nasty edge-case
  editor bugs that were not too difficult to fix, but would have
  taken a lot of time to uncover with manual testing.&lt;/p&gt;

&lt;pre class=&quot;code&quot; style=&quot;font-size: 85%&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;function-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;fuzz&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(n)
   &lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;need to display the seed so we can replay problematic sequences
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;seed&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;tonumber&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;os&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;getenv&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;BUSSARD_FUZZ_SEED&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;os&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;time&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;())
   &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;seeding with&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;, seed)
   &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;math&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;randomseed&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(seed)

   &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;=1,n &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;mode&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = editor.mode()
      &lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;smush together all the different sub-maps (ctrl, alt, ctrl-alt)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;commands&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = lume.concat(vals(mode.map), vals(mode.ctrl),
                                   vals(mode.alt), vals(mode[&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;ctrl-alt&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;]))
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;command&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = lume.randomchoice(commands)

      &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot;run &quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; .. binding_for(mode, command) .. &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;region&quot;&gt;&quot; in mode &quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; .. mode.name)
      try(lume.fn(editor.wrap, command))

      &lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;sometimes we should try inserting some text too
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(love.math.random(5) == 1) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
         try(lume.fn(editor.handle_textinput, random_text()))
      &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this is pretty limited in the kinds of bugs it can
  catch&amp;mdash;only problems that result in crashes or hangs can be
  identified by the fuzz tests. But it gives me confidence when I
  make further changes if I can throw 32768 cycles of random
  commands at it without seeing it break a sweat. And it&#39;s even
  better
  when &lt;a href=&quot;https://gitlab.com/technomancy/bussard/pipelines&quot;&gt;every
  incoming patch automatically has the testing applied against
  it&lt;/a&gt; using GitLab&#39;s CI.&lt;/p&gt;

&lt;p&gt;Stay tuned for
  a &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/master/Changelog.md#beta-2-&quot;&gt;second
  beta of Bussard&lt;/a&gt; to be released very soon! There is still a lot
  more I want to do with the story line and missions, but the engine
  is getting more and more polished with each milestone. Feedback is
  very welcome, as
  are &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/master/Contributing.md&quot;&gt;contributions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: I found that the fuzzer above has a critical flaw:
  it does not inspect the current mode&#39;s parent mode to look for
  commands there. (For instance, the console&#39;s parent mode is edit,
  and the ssh mode&#39;s parent is the console.) Fixing this immediately
  uncovered four new bugs.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] Yes, I know I just set myself up for the
  old &quot;Bussard is a great OS, it just lacks a decent text editor&quot;
  joke. Honestly I am just waiting for someone to come along and
  implement a vim mode in-game; if any player thinks they can do
  better than the built-in editor they are welcome to try!&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] It&#39;s a bit tricky to get LÖVE to run
  headless, but it can be done. Mostly it
  involves &lt;a href=&quot;https://gitlab.com/technomancy/bussard/blob/master/conf.lua#L18&quot;&gt;disabling &lt;tt&gt;love.graphics&lt;/tt&gt;
  and &lt;tt&gt;love.window&lt;/tt&gt; modules in &lt;tt&gt;conf.lua&lt;/tt&gt;&lt;/a&gt; and
  being careful with the order of loading. You also have to
  make sure that no calls to &lt;tt&gt;love.graphics&lt;/tt&gt; functions happen
  outside your &lt;tt&gt;love.draw&lt;/tt&gt; function.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20four%20cards%20make%20a%20gang</id>
    <published>2016-06-05T15:13:54Z</published>
    <updated>2016-06-05T15:13:54Z</updated>

    <link href="http://technomancy.us/179" rel="alternate" type="text/html"/>
    <title>in which four cards make a gang</title>
    <content type="html">
      &lt;p&gt;I really enjoy programming with my kids. For me helping them
  learn how computers work is more about training them in logical
  thinking, creativity, and problem solving than it is about
  teaching them to accomplish specific tasks with software. My goal
  isn&#39;t to help them land lucrative programming jobs when they get
  older, but to expand their horizons with skills they can use in
  any kind of profession.&lt;/p&gt;

&lt;p&gt;Over the past couple years, we&#39;ve gotten the chance to create a
  few different games in several different styles. My kids were
  recently gifted a deck
  of &lt;a href=&quot;https://www.daysofwonder.com/gangoffour/en/&quot;&gt;Gang of
  Four&lt;/a&gt; cards and were playing it nearly every day. This made it
  easy for them to get on board with the idea of
  &lt;a href=&quot;https://gitlab.com/technomancy/gang-of-four&quot;&gt;turning it
  into a computer game&lt;/a&gt; when I suggested it. Adapting a card game
  turns out to be a great way for beginners to learn about
  programming since you start with a very clear goal, and it is
  easily broken up into natural steps.&lt;/p&gt;

  &lt;p&gt;I&#39;ve tried to
  document here the topics that came up as we progressed through
  building one of these games, but I also think they learned a lot
  from just seeing how the program comes together bit by bit and by
  debugging when we ran into problems. While my kids can type and
  do often work independently, I&#39;ve found that the best approach
  usually has me at the keyboard guiding through the steps in a kind
  of &lt;a href=&quot;http://www.garlikov.com/Soc_Meth.html&quot;&gt;socratic
  style&lt;/a&gt; of questioning. There are certainly times when I&#39;ll
  cheat and simply cut off an avenue of thought that I feel will be
  unproductive or frustrating, but ideally I try to stick with
  asking questions and typing.&lt;/p&gt;

&lt;p&gt;Right now our weapon of choice is the
  &lt;a href=&quot;http://lua.org&quot;&gt;Lua&lt;/a&gt; programming language due to its
  relentless simplicity and the availability of the
  wonderful &lt;a href=&quot;https://love2d.org&quot;&gt;LÖVE&lt;/a&gt; game
  framework. While we&#39;ve done graphical games with LÖVE, this one
  makes more sense to start out as a plain Lua game that uses
  console input and output. The complete source code
  is &lt;a href=&quot;https://gitlab.com/technomancy/gang-of-four&quot;&gt;available
    on GitLab&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&quot;code&quot; style=&quot;font-size: 60%; line-height: 1; color: white; background-color: #222;&quot;&gt;&lt;span class=&quot;function-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;make_deck&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;()
  &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;deck&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; = {}
  &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;=1,10 &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;_&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;&lt;span class=&quot;region&quot;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;pairs&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;({0.1, 0.2, 0.3}) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(deck, i + c) &lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;two of each
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(deck, i + c)
    &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(deck, 1.4) &lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;special 1+ card
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(deck, 11.1) &lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;two phoenixes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(deck, 11.2)
  &lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;table&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;&lt;span class=&quot;region&quot;&gt;insert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;(deck, 12.3) &lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;&lt;span class=&quot;region&quot;&gt;-- &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;region&quot;&gt;dragon
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt; lume.shuffle(deck)
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;region&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;region&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Constructing the deck leads to some good opening questions of how
  to represent cards and what hands should look like. After seeing
  it deal out the exact same hands a few times, it also offered an
  opportunity to talk about what it means for a process to be
  deterministic and why you need
  to &lt;a href=&quot;https://www.youtube.com/watch?v=GtOt7EBNEwQ&quot;&gt;seed your
  random number generator&lt;/a&gt; to make the game fun.&lt;/p&gt;

&lt;p&gt;Once you add a loop which prints your hand and asks you which
  cards you want to play, the game is playable (in a &quot;hot-seat&quot;
  multiplayer style) as long as you already know the rules. Of
  course you will want to add checks for legal plays, but the
  minimum required for a playable prototype is here. Working in
  small discrete steps like this really helps with kids because
  reaching each milestone feels like a big win.&lt;/p&gt;

&lt;p&gt;After we added in functions to enforce the rules, we began to add
  computer players. Writing AI may seem like a really advanced
  topic, but for a card game like this it&#39;s pretty
  straightforward. Granted our computer players don&#39;t always make
  the most strategic decisions, but they get by pretty well with a
  basic strategy of always trying to get rid of their lowest-ranked
  cards. Here again we found a way to break it into smaller
  steps&amp;mdash;first the computer players are added to the rounds but
  only know how to pass, then they learn to play during single-card
  rounds, then they learn doubles and triples, etc. Writing computer
  players also led to a discussion about re-usable functions; many
  of the things we needed we had just implemented to determine
  whether a given hand was legal.&lt;/p&gt;

&lt;img src=&quot;i/pong.jpg&quot; alt=&quot;writing pong on the porch&quot; /&gt;

&lt;p&gt;In Gang of Four, the most powerful hand is a &quot;gang&quot;, a set of
  four or more which can always beat any non-gang hand. It&#39;s not
  unusual for a gang of four to appear, but a gang of five is pretty
  rare. We&#39;ve only seen a gang of six once, and while it is
  theoretically possible to get a gang of seven (there is only one
  way to make a gang of seven since most numbers only have six
  cards) the odds are astronomically against it. Still, the
  possibility that a gang of seven could exist kept my kids&#39;
  fascination.&lt;/p&gt;

&lt;p&gt;But now that we have a functioning simulation of the game, we can
  run
  through &lt;a href=&quot;https://gitlab.com/technomancy/gang-of-four/blob/master/howmany.lua&quot;&gt;a
  simulation of dealing out hands over and over again and check for
  gangs&lt;/a&gt;. We found that running a repeated dealing simulation
  could sometimes find a gang of seven after as little as 3,000
  games, but sometimes it would take up to 120,000. Not only does
  this give a good opportunity to talk about permutations,
  histograms, and simple optimizations[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;], but it
  also serves as a great demonstration of using &lt;em&gt;code&lt;/em&gt; to
  satisfy your own curiosity.&lt;/p&gt;

&lt;img src=&quot;i/gang-of-four.jpg&quot; alt=&quot;gang of four cards&quot; align=&quot;left&quot; /&gt;

&lt;p&gt;The grand finale of this enterprise involved the realization that
  &lt;a href=&quot;http://www.computercraft.info/wiki/Main_Page&quot;&gt;the
  ComputerCraft mod for MineCraft&lt;/a&gt; provides a way to run Lua code
  in-game which should be compatible with what we just wrote. While
  this wasn&#39;t quite seamless,[&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;] seeing our code
  that we&#39;d so far only run in a regular terminal running on an
  in-game machine was quite a thrill.&lt;/p&gt;

&lt;p&gt;We still have a few steps further open to us from
  here. Implementing multiplayer over a simple socket interface is
  not too difficult[&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;], but it forces you to
  revisit the assumptions you have so far about input and
  output. Another fun direction would be to add a GUI for the game
  using &lt;a href=&quot;https://love2d.org/wiki/love.graphics&quot;&gt;LÖVE&#39;s
  graphical capabilities&lt;/a&gt;. Or implementing a user interface in
  a &lt;a href=&quot;http://minetest.net&quot;&gt;MineTest&lt;/a&gt; Lua mod where the
  cards are individual items. The point is being able to just
  explore whatever direction the kids interest takes them.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] The only possible gang of seven is a hand
  of seven ones, so you can quickly check for a gang of seven on a
  sorted hand by seeing if the seventh card is a 1. There are lots
  of other optimizations you can make, but they were excited to see
  significant speed boosts from replacing the naive check with this
  one. But there was also a complexity cost if we wanted to keep
  the old code around for compatibility with detecting gangs of 4,
  5, or 6.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] If I were to do this over, I would
  use &lt;a href=&quot;http://ocdoc.cil.li/&quot;&gt;OpenComputers&lt;/a&gt; instead since
  it&#39;s a lot better-documented and open source.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn3&quot;&gt;3&lt;/a&gt;] We actually already implemented
  multiplayer, but this post is getting long enough as it is.&lt;/p&gt;

&lt;!-- further topics:
     * implementing an existing design instead of designing while you code
     * tension between working code and clean code, learning by messiness --&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20year%20one%20comes%20to%20a%20close</id>
    <published>2015-12-31T22:11:48Z</published>
    <updated>2015-12-31T22:11:48Z</updated>

    <link href="http://technomancy.us/178" rel="alternate" type="text/html"/>
    <title>in which year one comes to a close</title>
    <content type="html">
      &lt;p&gt;Everyone asks what it&#39;s like to live here in Thailand on the
  border. &quot;Great, and weird&quot; is how I like to sum it up&amp;mdash;the
  country
  is &lt;a href=&quot;https://www.flickr.com/photos/technomancy/19658530230&quot;&gt;beautiful&lt;/a&gt;;
  the &lt;a href=&quot;https://www.flickr.com/photos/technomancy/20907191594/&quot;&gt;food
  is ridiculously good&lt;/a&gt; and cheap enough to eat out every day;
  there&#39;s
  always &lt;a href=&quot;https://www.flickr.com/photos/technomancy/19489921493&quot;&gt;something
  fun to do around&lt;/a&gt;; great! Most people think the &quot;weird&quot; part
  comes from maybe
  the &lt;a href=&quot;http://diythegoodlife.com/2015/12/02/spirited-away-in-thailand/&quot;&gt;animist
  spirit houses&lt;/a&gt; everywhere, or the stalls serving fried crickets
  and grubs at the night market, or finding snails climbing up the
  inside of your kitchen pipes and poking up into your sink,
  or &lt;a href=&quot;http://livingintoeventually.blogspot.com/2015/10/burmese-fermented-tea-leaf-salad.html&quot;&gt;salad
  made out of fermented tea leaves&lt;/a&gt;? But no; all that stuff becomes everyday
  eventually. What&#39;s much harder to come to grips with is just being
  here, living a life of relative ease, and not knowing how to help
  the people around you who are going
  through &lt;a href=&quot;http://livingintoeventually.blogspot.com/2015/06/processing.html&quot;&gt;difficulties
  you have a hard time even wrapping your head around&lt;/a&gt;.&lt;/p&gt;

&lt;a href=&quot;https://www.flickr.com/photos/technomancy/21429068813&quot;&gt;
  &lt;img src=&quot;i/dump-clouds.jpg&quot; at=&quot;Clouds at the dump&quot;&gt;&lt;/a&gt;

&lt;p&gt;The Charis Project, which we are working under, doesn&#39;t really
  have projects for which it makes sense for me to be directly involved
  right now, so I have been looking for other ways to help out in, mostly
  the field of education. I began with trying to start a string of
  small projects on my own, but each of them so far has fizzled out
  or not gotten off the ground to begin with. I&#39;ve heard from others
  with more field experience that long-term volunteers should expect
  it to take a while before they are really effective here.&lt;/p&gt;

&lt;p&gt;There is a pattern of westerners naively coming in and thinking
  that they can dive right in
  and &lt;a href=&quot;https://www.washingtonpost.com/posteverything/wp/2015/06/04/technology-wont-fix-americas-neediest-schools-it-makes-bad-education-worse/&quot;&gt;contribute
  without understanding the context&lt;/a&gt;, and this often results in
  projects that end up abandoned after a year or so because there
  was no buy-in from the people they were intended to help. In order
  to avoid this I&#39;ve come to the conclusion that it makes much more
  sense to partner with and learn from some of the larger
  organizations who have been involved in that kind of work here for
  a long time instead of trying to kick off my own thing right off
  the bat. What works, what doesn&#39;t?  What communities are
  receptive? What context am I dropping into the middle of
  unawares?&lt;/p&gt;

&lt;p&gt;So that&#39;s been where I&#39;ve been focusing more recently. It&#39;s a
  little rough to have come this far without more to show, but the
  language-learning front has proceeded better, and that is always
  time well-spent. Here&#39;s to seeing what year two brings.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; I moved back to the US with my family in late 2016
  to live in Washington state.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20we%20take%20a%20deep%20breath%20before%20the%20upcoming%20plunge</id>
    <published>2014-12-16T13:20:33Z</published>
    <updated>2014-12-16T13:20:33Z</updated>

    <link href="http://technomancy.us/177" rel="alternate" type="text/html"/>
    <title>in which we take a deep breath before the upcoming plunge</title>
    <content type="html">
      &lt;p&gt;So you might be wondering &quot;what the deuce is technomancy up to
  these days anyway; he seems to be all over the place&quot;. Or you
  might be not wondering that, but if you were, you&#39;d have a
  great point. I&#39;m not doing much Clojure these days, there&#39;s just a
  smattering of Racket going on, and I&#39;m not doing all that much
  Erlang either.&lt;/p&gt;

&lt;img src=&quot;/i/vine-pole.jpg&quot; alt=&quot;vine pole&quot; class=&quot;right&quot; /&gt;

&lt;p&gt;Well, this post isn&#39;t much about code, but perhaps you&#39;ll indulge
  me a bit all the same. My wife and I always had the idea that we
  would move overseas at some point. I grew up in Indonesia and
  Singapore, and her father was raised in Ecuador. We didn&#39;t really
  have a clear idea of what this would look like, but as 2014 began
  we started to look more seriously.&lt;/p&gt;

&lt;p&gt;This past June, my wife and I traveled to Thailand for a few
  weeks in order to meet up with a few organizations working
  specifically with Burmese affected by
  the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internal_conflict_in_Burma&quot;&gt;long-running
  civil war&lt;/a&gt;
  and &lt;a href=&quot;https://en.wikipedia.org/wiki/Human_rights_in_Burma&quot;&gt;rampant
  human rights abuses&lt;/a&gt;. We spent some time
  in &lt;a href=&quot;https://en.wikipedia.org/wiki/Chiang_Mai&quot;&gt;Chiang
  Mai&lt;/a&gt;[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;] but then headed down
  to &lt;a href=&quot;https://en.wikipedia.org/wiki/Mae_Sot&quot;&gt;Mae Sot&lt;/a&gt; on
  the Burmese border. While we were down there we stayed with folks
  from &lt;a href=&quot;http://thecharisproject.org&quot;&gt;the Charis project&lt;/a&gt;
  and got to hear stories of their efforts to lift migrant families
  in the area out of poverty.&lt;/p&gt;

&lt;p&gt;So often you see western aid framed in terms of Americans coming
  in with their money to save the day, (it&#39;s less often you hear
  about &lt;a href=&quot;http://aswwu.com/collegian/voluntourism-more-harm-than-good/&quot;&gt;ways
  in which this backfires and contributes to a cycle of
  dependence&lt;/a&gt;) but we could clearly see that wasn&#39;t what was
  happening here. The Charis Project possessed a bold and compelling
  vision for breaking the cycle of poverty by empowering whole
  families to be self-sustaining, and they had an impressive track
  record when it came to pulling it off.&lt;/p&gt;

&lt;p&gt;I could tell you some of the stories we heard from them, but they
    &lt;a href=&quot;http://www.shelaughsatthedays.net/2014/07/we-are-small.html&quot;&gt;do&lt;/a&gt; &lt;a href=&quot;http://www.shelaughsatthedays.net/2014/04/an-embarrassment-of-riches.html&quot;&gt;it&lt;/a&gt;
    so
    &lt;a href=&quot;http://insearchofashamelessgospel.blogspot.com/2014/04/what-are-we-going-to-do-tonight-brain.html&quot;&gt;much&lt;/a&gt;
    &lt;a href=&quot;http://www.shelaughsatthedays.net/2014/01/of-beggars-and-boys-and-becoming-men.html&quot;&gt;better&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yesterday I quit my fantastic job of three years at Heroku, and
  I&#39;m planning on moving with my family to Thailand next month to
  partner with them.&lt;/p&gt;

&lt;p&gt;It isn&#39;t clear yet exactly what our role will be there. If it
  ends up to be working with technology somehow (likely in the form
  of education?) then that would be great, but I&#39;ve gotten over
  myself and will be content even if not. I&#39;ve learned a lot about
  selflessness and helping others through my friends and church the
  last few years. I almost feel embarassed that it took me to the
  point where I had everything in my own life put together before I
  could really take the time to think seriously about what I could
  do to help those around me. But it feels like the only response I
  could have as I reflect on how blessed my own life has been and
  when I read about the situations some of these people are living
  in.&lt;/p&gt;

&lt;img src=&quot;/i/doi-musur-hut.jpg&quot; alt=&quot;hut&quot; /&gt;

&lt;p&gt;So the current plan is to fly over in the middle of January. I
  plan on spending a portion of my time doing
  consulting[&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;], but since the cost of living is
  dramatically lower in Mae Sot than in the United States, my hope
  is that this will still leave me with a significant amount of time
  to work with Charis. In addition, I want to continue to
  run &lt;a href=&quot;http://atreus.technomancy.us&quot;&gt;my custom keyboard
  business&lt;/a&gt; selling kits. 10% of proceeds will go directly to
  poverty-alleviation projects, and the rest will go to supporting
  my family; if interest remains strong it may allow me to focus
  more and spend less time consulting.&lt;/p&gt;

&lt;p&gt;But you don&#39;t need to buy a keyboard to contribute to the work
  going on there. Again, they&#39;ve said it
  better &lt;a href=&quot;http://thecharisproject.org/partners/&quot;&gt;on their
  blog&lt;/a&gt; than I could, but it&#39;s remarkable how great an impact you
  can have with donations that can seem so small from a western
  lifestyle
  perspective. Please &lt;a href=&quot;http://thecharisproject.org/donate/&quot;&gt;consider
  giving&lt;/a&gt; to support their life-changing projects.&lt;/p&gt;

&lt;p&gt;I&#39;ll be posting updates as things progress. We anticipate we will
  spend a while focused mostly on learning the language, culture,
  and just figuring out life. We&#39;re all very excited to move into
  this next phase.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; I moved back to the US with my family in late 2016
  to live in Washington state.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] I may have talked to some of you in the
  past about working in Chiang Mai for another organization. Both
  organizations are doing fantastic work I greatly respect. It&#39;s a
  long story, but we realized not too long ago that if we really
  wanted our whole family to be involved, Chiang Mai and the work we
  had planned there wasn&#39;t the way to go about it.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] Spending the last five years working
  remotely has helped prepare me for an arrangement like this,
  though the time zones will be a new challenge for me.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20a%20shingle%20is%20hung%20out</id>
    <published>2014-11-24T08:22:23Z</published>
    <updated>2014-11-24T08:22:23Z</updated>

    <link href="http://technomancy.us/176" rel="alternate" type="text/html"/>
    <title>in which a shingle is hung out</title>
    <content type="html">
      &lt;img src=&quot;/i/atreus-production.jpg&quot; alt=&quot;Atreus production&quot; class=&quot;right&quot; /&gt;

&lt;p&gt;&lt;a href=&quot;/173&quot;&gt;Earlier this year&lt;/a&gt; I designed and built a small
  ergonomic mechanical keyboard.  My original goal was just that of
  personal use; I wanted to take the joy of mechanical keyboards
  with me when I go work from coffee shops.
  I &lt;a href=&quot;https://github.com/technomancy/atreus&quot;&gt;put the design
  on Github&lt;/a&gt; and documented my build process with photos, and
  once I finished my own keyboard I figured I&#39;d be done with it.
  But a few of my friends were intrigued and asked me if I&#39;d build
  them keyboards.  I had a lot of fun constructing my first one, so
  I agreed to build a few more to sell to friends.
&lt;/p&gt;

&lt;p&gt;
  Once I got going, one thing led to another, and I started getting
  queries from friends-of-friends.  I put
  up &lt;a href=&quot;http://atreus.technomancy.us&quot;&gt;a web site
  with an order form&lt;/a&gt;, and orders started trickling in.  Due to
  the hand-wiring approach used the construction of these boards
  took a good four hours of nights and weekends, so a backlog
  started piling up.  At this point I decided I could make myself
  less of a bottleneck by selling kits and allowing interested
  customers to do the assembly themselves.  This was a big help, and
  it seemed people really liked the hands-on approach.  There&#39;s
  nothing quite like the satisfaction of using hardware you&#39;ve
  constructed yourself.
&lt;/p&gt;

&lt;img src=&quot;/i/atreus-wiring.jpg&quot; alt=&quot;Atreus wiring&quot; /&gt;

&lt;p&gt;The &quot;proper&quot; way to make a keyboard is to build it around a
  circuit board. But circuit board design is its own skill, and
  their production benefits greatly from volume discounts, so it
  really didn&#39;t make sense for my own personal project.  But once I
  started to get more orders it became clear that a circuit board
  would help a lot since the process of hand-wiring is rather
  intimidating if you&#39;ve never done any soldering before. I broke
  out &lt;a href=&quot;&quot;&gt;KiCAD&lt;/a&gt; and started laying out a circuit board to
  hold the switches, diodes, and microcontroller after reading
  through some documentation and tutorials.
&lt;/p&gt;

&lt;img src=&quot;/i/atreus-one-hand.png&quot; alt=&quot;One side of Atreus PCB&quot; align=&quot;left&quot; /&gt;

&lt;p&gt;I carefully laid out one side of the circuit board according to
  the row spacing and staggering used in the laser-cut case files without too
  much trouble. Each switch was connected to the others in the row
  with one pin and to the others in the column with the other, and
  each row and column was brought back in to the middle with the
  microcontroller. Then I hit a snag&amp;mdash;the two halves of the
  Atreus keyboard are rotated inward at a 10° angle, but when I went
  to rotate the design in KiCAD rather than rotating them as a unit,
  it simply applied the rotation to each component individually.&lt;/p&gt;

&lt;p&gt;At that point I was starting to think I&#39;d have to do all this
  trig by hand and enter the calculated coordinates one by one into
  KiCAD&#39;s edit boxes, which did not sound like fun. I asked on the
  Freenode channel and found to my delight that the new file format
  for KiCAD is based on s-expressions! It can all be easily
  manipulated programmatically. Since the data includes symbols with
  leading digits in their names, the Clojure reader couldn&#39;t handle
  it, but Racket didn&#39;t have a problem with it. So I put
  together &lt;a href=&quot;https://github.com/technomancy/atreus/blob/master/atreus.rkt#L157&quot;&gt;some
  Racket code&lt;/a&gt; to run the trig necessary to calculate the switch
  and diode positions.
&lt;/p&gt;

&lt;img src=&quot;/i/atreus-pcb.jpg&quot; alt=&quot;Atreus PCB&quot; /&gt;

&lt;p&gt;Anyway, I just finished assembling my first circuit-board-based
  keyboard, and it works nicely. It&#39;s dramatically easier than the
  hand-wired variant, even such that my six-year-old son wants to
  build his own. I had to make one change to give clearance for the
  micro-USB connector, but I was able to apply this &quot;revision&quot; to my
  already-produced circuit boards with a hacksaw.&lt;/p&gt;

&lt;p&gt;Up to this point I haven&#39;t publically promoted it much, but
  now that the circuit board is here I&#39;m prepared to handle a
  greater volume of orders. So if you&#39;re interested in building your
  own mechanical travel keyboard or want to hack some hardware
  designed using Lisp, take a look
  at &lt;a href=&quot;http://atreus.technomancy.us&quot;&gt;http://atreus.technomancy.us&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20preconceptions%20are%20unavoidable</id>
    <published>2014-10-13T20:50:41Z</published>
    <updated>2014-10-13T20:50:41Z</updated>

    <link href="http://technomancy.us/175" rel="alternate" type="text/html"/>
    <title>in which preconceptions are unavoidable</title>
    <content type="html">
      &lt;p&gt;In my &lt;a href=&quot;/174&quot;&gt;last post&lt;/a&gt; I introduced my latest
  project, &lt;a href=&quot;https://github.com/technomancy/cooper&quot;&gt;a
  HyperCard clone&lt;/a&gt; I&#39;ve been writing in
  the &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket programming
  language&lt;/a&gt;, which is a practical and accessible dialect of
  Scheme. I&#39;d played around a bit with Racket before, but this was
  the first time I&#39;d used it for anything nontrivial. Any
  time &lt;a href=&quot;http://www.greghendershott.com/2014/10/hands-on-with-clojure.html&quot;&gt;you
  come to an unfamiliar language&lt;/a&gt;, there&#39;s naturally a period of
  disorientation in which it can be frustrating to find your
  footing. Racket&#39;s similarity to Clojure (the language I&#39;m
  currently most proficient in) means this shouldn&#39;t be as
  pronounced as it would be with many languages, but these are my
  subjective reactions to how it&#39;s gone implementing my first
  project. There are a number of gripes, but if I may offer a
  spoiler, in the end Racket provides satisfactory ways of
  addressing all of them that aren&#39;t obvious up-front, and brings
  valuable new perspectives to the table.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When I was getting started with Racket, I was pleased to see that
  it defaults to immutable data structures. Coming from a Clojure
  background, I&#39;m used to using free-form maps for
  everything. Racket has hash tables which sound similar, so let&#39;s
  take a look at how they&#39;re used:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;h&lt;/span&gt; #hash&lt;span class=&quot;racket-paren&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;racket-selfeval&quot;&gt;&#39;a&lt;/span&gt; . &lt;span class=&quot;racket-selfeval&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;racket-selfeval&quot;&gt;&#39;b&lt;/span&gt; . &lt;span class=&quot;racket-selfeval&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;racket-selfeval&quot;&gt;&#39;c&lt;/span&gt; . &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;345&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;h &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;b&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;application: not a procedure;
&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;  &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;expected a procedure that can be applied to arguments
&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;   &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;given: &#39;#hash((a . 123) (b . 234) (c . (+ 345 456)))
&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;   &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;arguments...:
&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;    &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&#39;b&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;What&#39;s going on here? Well, it looks like hash tables can&#39;t be
  called like functions. This has never made any sense to me, since
  immutable hash tables are actually &lt;i&gt;more&lt;/i&gt; like mathematical
  functions than lambdas are. But whatever, we&#39;ll just
  use &lt;tt&gt;hash-ref&lt;/tt&gt; instead; it&#39;s more verbose but should get
  the job done:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;hash-ref h &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;b&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;hash-ref: no value found for key
&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;   &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;key: &#39;b
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;It turns out Racket implicitly quotes everything inside the hash
  table. So OK, maybe that&#39;s a little nicer since you don&#39;t need to
  quote the symbol keys in the hash table:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;h&lt;/span&gt; #hash&lt;span class=&quot;racket-paren&quot;&gt;((&lt;/span&gt;a . &lt;span class=&quot;racket-selfeval&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;b . &lt;span class=&quot;racket-selfeval&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;c . &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;345&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;hash-ref h &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;b&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; 234
&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;hash-ref h &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;c&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; &#39;(+ 345 456)&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Oh dear... that&#39;s less than ideal, especially compared to Clojure&#39;s
  simple &lt;tt&gt;(def h {:a 123 :b 234 :c (+ 345 456)}&lt;/tt&gt; and &lt;tt&gt;(:c
  h)&lt;/tt&gt; notation. But let&#39;s move on[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;] since it
  turns out hash tables are not nearly as important as maps are in
  Clojure. It&#39;s more idiomatic to use structs if your fields are
  known up-front:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;struct abc &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;a b c&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;abc &lt;span class=&quot;racket-selfeval&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;234&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;345&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;abc-c s&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; 801
&lt;/span&gt;s &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; #&amp;lt;abc&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;So that&#39;s nice in that it avoids the implicit quoting; our
  regular evaluation rules work at least. But what&#39;s this at the
  end? Racket structs default to being opaque. This may have made
  sense years ago when you needed to protect your mutable fields,
  but now that immutability is the default, it just gets in the
  way. Luckily you can set the &lt;tt&gt;#:transparent&lt;/tt&gt; option when
  defining structs, and this will likely become the default in the
  future.&lt;/p&gt;

&lt;p&gt;One place where Racket has a clear advantage over Clojure is that
  you&#39;ll never get nil back from an accessor. Both in hash tables
  and structs, if a field doesn&#39;t exist, you&#39;ll get an error
  immediately rather than allowing bogus data to percolate through
  your call chain and blow up in an unrelated place. (Though of
  course with hash tables you can specify your own value for the
  &quot;not found&quot; case.)  In any case, less &quot;garbage in, garbage out&quot; is
  a welcome change for me as a human who frequently makes
  mistakes.&lt;/p&gt;

&lt;p&gt;What about updates, though? Mutable struct fields have setter
  functions auto-generated, but inexplicably the nondestructive
  equivalents for immutable fields are missing. Instead
  the &lt;tt&gt;struct-copy&lt;/tt&gt; macro is recommended. Here we change
  the &lt;tt&gt;b&lt;/tt&gt; field of an &lt;tt&gt;abc&lt;/tt&gt; struct instance we&#39;ve
  defined:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;struct-copy abc s &lt;span class=&quot;racket-paren&quot;&gt;[&lt;/span&gt;b &lt;span class=&quot;racket-selfeval&quot;&gt;987&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;abc-b s2&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; 987&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;This works, though you have to repeat the struct type in the
  invocation. That&#39;s not so bad, but the bigger problem is that this
  is a macro. The field you wish to update must be known at compile
  time, which makes it awkward to use in the context of higher
  order functions.&lt;/p&gt;

&lt;p&gt;At this point the post is surely sounding pretty whiny. While the
  out-of-the-box experience working with these data structures is
  not great, Racket gives you plenty of power to make things
  better. Probably the most comprehensive take on this I&#39;ve seen
  is &lt;a href=&quot;http://www.greghendershott.com/rackjure/&quot;&gt;Rackjure&lt;/a&gt;,
  which gives you a lot of the creature comforts I&#39;ve noted as
  missing above like nicer hash table syntax and data structures you
  can call like functions, as well as a few other niceties
  like &lt;a href=&quot;http://www.greghendershott.com/rackjure/index.html#%28part._.Operational_equivalence%29&quot;&gt;a
  general-purpose equality predicate&lt;/a&gt;[&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;]
  and &lt;a href=&quot;http://www.greghendershott.com/rackjure/index.html#%28part._.Atomic_swap%29&quot;&gt;atomic
  swap for boxes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my initial exploration of Racket, I resisted the temptation to
  dive straight into Rackjure in order to give &quot;raw Racket&quot; a fair
  shakedown. Because of this, I&#39;ve spent more time looking into
  structs and some of the options they provide. Racket has the
  notion
  of &lt;a href=&quot;http://docs.racket-lang.org/reference/createinterface.html&quot;&gt;interfaces&lt;/a&gt;
  you can conform to in order to get generic functionality
  specialized to a certain struct
  type. &lt;a href=&quot;http://docs.racket-lang.org/reference/dicts.html&quot;&gt;Dictionaries&lt;/a&gt;
  are one of the interfaces it ships with out of the box, so you can
  use &lt;tt&gt;dict-ref&lt;/tt&gt;, &lt;tt&gt;dict-set&lt;/tt&gt;, etc with hash-tables and
  other built-in types that conform to this interface. Your typical
  structs won&#39;t work with it, but you can declare structs that
  implement it without too much fuss. I&#39;ve done this with
  my &lt;a href=&quot;https://github.com/technomancy/cooper/blob/master/cooper/fstruct.rkt&quot;&gt;fstruct&lt;/a&gt;
  macro:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fstruct fabc &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;a b c&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;define a struct type with three fields&lt;/span&gt;
&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fabc &lt;span class=&quot;racket-selfeval&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;234&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;345&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-ref fs &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; 123
&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-set fs &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;b&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; (fabc 123 234 801)
&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-update fs &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;c&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&amp;#955;&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;-&lt;/span&gt; x &lt;span class=&quot;racket-selfeval&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; (fabc 123 234 401)&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;One gotcha if you&#39;re used to Clojure is that &lt;tt&gt;dict-update&lt;/tt&gt;
  is not variadic&amp;mdash;if you provide a fourth argument it will be
  used as a &quot;not found&quot; value rather than as an argument to the
  updater function. &lt;tt&gt;(dict-update fs &#39;c - 400)&lt;/tt&gt; won&#39;t
  work. However, unlike Clojure, Racket can do reverse partial
  application, so &lt;tt&gt;(rcurry - 400)&lt;/tt&gt; does the job, which is
  nicer than spelling out the lambda form fully.&lt;/p&gt;

&lt;p&gt;Another gotcha is that &lt;tt&gt;dict-update&lt;/tt&gt; doesn&#39;t appear to
  have a nested equivalent. For instance; it would be nice to be
  able to pass an updater function and a &quot;key path&quot; to a specific
  value in a tree of dictionaries:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fabc &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;a b c&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;ht-nest&lt;/span&gt; `#hash&lt;span class=&quot;racket-paren&quot;&gt;((&lt;/span&gt;key1 . ,inner&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;key2 . &lt;span class=&quot;racket-selfeval&quot;&gt;#f&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fabc &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt; ht-nest &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;racket-selfeval&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;updated&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-update-in outer &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;b key1 a&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;builtin&quot;&gt;append&lt;/span&gt; &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;d e f&lt;span class=&quot;racket-paren&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-ref-in updated &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;b key1 a&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; &#39;(a b c d e f)&lt;/span&gt;&lt;/pre&gt;

  &lt;p&gt;So that is easy to add:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;function-name&quot;&gt;dict-update-in&lt;/span&gt; d ks f . args&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;empty? &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;rest ks&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-update d &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;first ks&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&amp;#955;&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;apply&lt;/span&gt; f x args&lt;span class=&quot;racket-paren&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-set d &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;first ks&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;apply&lt;/span&gt; dict-update-in
                                    &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-ref d &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;first ks&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;
                                    &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;rest ks&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; f args&lt;span class=&quot;racket-paren&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;function-name&quot;&gt;dict-ref-in&lt;/span&gt; d ks&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;empty? &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;rest ks&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-ref d &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;first ks&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-ref-in &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-ref d &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;first ks&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;rest ks&lt;span class=&quot;racket-paren&quot;&gt;))))&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;tt&gt;fstruct&lt;/tt&gt; macro has one more trick up its sleeve. The
  structs it generates are applicable just like Clojure maps:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;fs2&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fabc &lt;span class=&quot;racket-selfeval&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fabc &lt;span class=&quot;racket-selfeval&quot;&gt;234&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;345&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fabc &lt;span class=&quot;racket-selfeval&quot;&gt;987&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;654&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fs2 &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; 123
&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fs2 &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;b b&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; 345
&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fs2 &lt;span class=&quot;racket-selfeval&quot;&gt;&#39;c&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; (fabc 123 (fabc 234 345 (fabc 987 654 321)) 9)
&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;fs2 &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;b c a&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; (fabc 123 (fabc 234 345 (fabc 0 654 321)) 0)&lt;/span&gt;
&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;dict-update-in fs2 &#39;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;b b&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;builtin&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;555&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; (fabc 123 (fabc 234 900 (fabc 987 654 321)) 0)&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;They support nested lookups and setting out of the box, but of
  course for expressing updates that are a function of the old value
  to the new value you&#39;ll have to use &lt;tt&gt;dict-update&lt;/tt&gt;
  or &lt;tt&gt;dict-update-in&lt;/tt&gt;. My primary project at the moment has a
  deeply-nested &lt;tt&gt;state&lt;/tt&gt; fstruct that contains hash-tables
  which contain fstructs, so being able to use a
  single &lt;tt&gt;dict-update-in&lt;/tt&gt; which operates across multiple
  concrete types is very convenient.&lt;/p&gt;

&lt;p&gt;Finally, while I prefer pure functions for as much of the logic
  as I can, the outer layer requires tracking state and changes to
  it. Racket provides the &lt;tt&gt;box&lt;/tt&gt; type for this, which is
  equivalent to the &lt;tt&gt;atom&lt;/tt&gt; of Clojure. Unfortunately while it
  provides the same compare-and-swap atomicity guarantees, it only exposes this
  via the low-level &lt;tt&gt;box-cas!&lt;/tt&gt; function. Oh well,
  functional &lt;tt&gt;swap!&lt;/tt&gt; which operates in terms of the old value
  is easy to implement on our own or steal from Rackjure:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;function-name&quot;&gt;swap!&lt;/span&gt; &lt;span class=&quot;builtin&quot;&gt;box&lt;/span&gt; f . args&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;[(&lt;/span&gt;old &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;unbox&lt;/span&gt; &lt;span class=&quot;builtin&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;box-cas!&lt;/span&gt; &lt;span class=&quot;builtin&quot;&gt;box&lt;/span&gt; old &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;apply&lt;/span&gt; f old args&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;apply&lt;/span&gt; swap! &lt;span class=&quot;builtin&quot;&gt;box&lt;/span&gt; f args&lt;span class=&quot;racket-paren&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;variable-name&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;builtin&quot;&gt;box-cas!&lt;/span&gt; b &lt;span class=&quot;racket-selfeval&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;92&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; b now contains 92
&lt;/span&gt;
&lt;span class=&quot;racket-paren&quot;&gt;(&lt;/span&gt;swap! b &lt;span class=&quot;builtin&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;racket-selfeval&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;racket-paren&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment-delimiter&quot;&gt;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;-&amp;gt; b now contains 167&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/technomancy/cooper&quot;&gt;HyperCard
  clone&lt;/a&gt; I &lt;a href=&quot;/174&quot;&gt;wrote about in my last post&lt;/a&gt;
  consists of a number of modes that define handlers that can update
  the state based on clicks. The handlers are all functions that
  take and return a &lt;tt&gt;state&lt;/tt&gt; fstruct and are called via
  the &lt;tt&gt;swap!&lt;/tt&gt; function. This allows the bulk of the code to
  be written in a pure fashion while keeping state change
  constrained to
  only &lt;a href=&quot;https://github.com/technomancy/cooper/blob/master/cooper/main.rkt#L51&quot;&gt;two
  outer-layer mouse and key handler functions&lt;/a&gt;. The actual box
  containing the state never leaves the &lt;tt&gt;main&lt;/tt&gt; module.&lt;/p&gt;

&lt;p&gt;Racket has top-notch support for
  &lt;a href=&quot;http://docs.racket-lang.org/reference/data-structure-contracts.html&quot;&gt;contracts&lt;/a&gt;
  that
  can &lt;a href=&quot;https://github.com/technomancy/cooper/blob/master/cooper/cooper.rkt#L55&quot;&gt;describe
  the shape of data&lt;/a&gt;. In this case rather than attaching
  contracts to functions scattered all over the codebase, I attach
  them only to the box that contains the &lt;tt&gt;state&lt;/tt&gt; struct, and
  any time there&#39;s a type bug it&#39;s usually immediately apparent what
  caused the trouble. For instance, I have a contract that states
  that the &quot;corners&quot; field of each button must be a list of four
  natural numbers, but I&#39;ve made a change which causes one of them
  to be negative:&lt;/p&gt;

&lt;pre class=&quot;code&quot;&gt;now: broke its contract
   promised: natural-number/c
   produced: -23
   in: the 3rd element of
       the corners field of
       an element of
       the buttons field of
       the values of
       the cards field of
       the stack field of
       the content of
       (box/c (struct/dc state
                         (card string?)
                         (stack (struct/dc stack ...))))&lt;/pre&gt;

&lt;p&gt;It&#39;s pretty clear here that I&#39;ve made a miscalculation in the
  button coordinates. If you use DrRacket, the IDE that ships with
  Racket, you get a &lt;a href=&quot;/i/drracket-error.png&quot;&gt;very slick
  visual trace&lt;/a&gt; leading you directly to the point at which the
  contract was violated. While it would be possible to gain more
  certainty about correctness at compile time by
  using &lt;a href=&quot;http://docs.racket-lang.org/ts-guide/index.html&quot;&gt;Typed
  Racket&lt;/a&gt;, contracts let me define the shape of the data in a
  single place rather than annotating every function that handles
  state.&lt;/p&gt;

&lt;p&gt;While I&#39;d certainly be happy if Racket accomodated some of these
  functional programming idioms in a more streamlined way out of the
  box, it speaks volumes that I was able to make myself quite
  comfortable on my own only a week or two after beginning with the
  language[&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;]. It&#39;s interesting to note that all
  of the places in which Clojure has the edge[&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;]
  over Racket (with the conspicuous exception of equality) lie
  around succinctness and greater expressivity, while Racket&#39;s
  advantages are all around improved correctness and making mistakes
  easier to prevent and detect.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] It&#39;s possible to perform evaluation inside
  hash literal syntax by using backticks: &lt;tt&gt;`#hash((a . ,(+ 5 6
  7))&lt;/tt&gt; does what you expect. It&#39;s better than nothing, but
  that&#39;s a lot of noise to express a simple concept. In practice,
  you don&#39;t really use the literal notation in programs; you just
  call the &lt;tt&gt;hash&lt;/tt&gt; function.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] I&#39;ve blogged about &lt;a href=&quot;/159&quot;&gt;why egal
  is such a great equality predicate&lt;/a&gt;. Racket ships with a
  bewildering array of equality functions, but in functional code
  you really only need this one (sadly absent from the core
  language) for 98% of what you do.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn3&quot;&gt;3&lt;/a&gt;] With one exception: Racket&#39;s macro system
  is rather intimidating coming from Clojure. Its additional
  complexity allows it to support some neat things, but so far I
  haven&#39;t gotten to the point where I&#39;d understand why I&#39;d want to
  do those kinds of things. In any case, I got help
  from &lt;a href=&quot;http://www.greghendershott.com/&quot;&gt;Greg
  Hendershott&lt;/a&gt; to turn the &lt;tt&gt;fstruct&lt;/tt&gt; macro into something
  properly hygenic.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn4&quot;&gt;4&lt;/a&gt;] This ignores the advantages conferred by
  the respective implementations&amp;mdash;Clojure has significantly
  better performance and access to libraries, while Racket&#39;s
  compiler/debugger/editor tools are much more polished, and its
  resource consumption is dramatically lower.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20cards%20are%20stacked</id>
    <published>2014-10-07T22:25:46Z</published>
    <updated>2014-10-07T22:25:46Z</updated>

    <link href="http://technomancy.us/174" rel="alternate" type="text/html"/>
    <title>in which cards are stacked</title>
    <content type="html">
      &lt;p&gt; My childhood summers involved many days spent building out
  expansive &lt;a href=&quot;https://en.wikipedia.org/wiki/HyperCard&quot;&gt;HyperCard&lt;/a&gt;
  stacks to explore in a game world that spanned across cities
  and islands and galaxies, littered with creatively absurd death
  scenes to keep you on your toes. The instant accessibility of
  HyperCard invited you to explore and create without feeling
  intimidated. Especially for younger minds, I believe there&#39;s
  something fundamental about the spatial aspect of HyperCard. Every
  button has its place, and rather than creating an abstract
  hierarchy of classes or a mesh of interconnected modules, you can
  see that buttons have a specific place on a card, which exist
  &quot;inside&quot; a stack in a metaphor that maps to the way we already
  perceive the world.&lt;/p&gt;

&lt;img src=&quot;/i/for-kids.jpg&quot; alt=&quot;you know, for kids&quot; class=&quot;right&quot; /&gt;

&lt;p&gt;While &lt;a href=&quot;http://www.loper-os.org/?p=568&quot;&gt;Apple killed
  HyperCard off many years ago&lt;/a&gt;, there exist tools for children
  today that maintain this accessible spatial
  arrangement. I&#39;ve &lt;a href=&quot;/167&quot;&gt;written before&lt;/a&gt; about how my
  kids love playing
  with &lt;a href=&quot;http://scratch.mit.edu&quot;&gt;Scratch&lt;/a&gt;, a
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Logo_%28programming_language%29&quot;&gt;Logo&lt;/a&gt;-descendant
  providing colorful sprites and drag-and-drop scripts to animate
  them. While this is unbeatable for the early years, (especially
  for kids who are only just beginning to learn to read) eventually
  you hit an abstraction ceiling beyond which it becomes very
  tedious to express your ideas due to its non-textual nature. There
  are modern HyperCard clones
  like &lt;a href=&quot;http://livecode.com&quot;&gt;LiveCode&lt;/a&gt;, which offers a
  very sophisticated platform, but falls prey to the same tragic
  pitfall of attempting to
  build &lt;a href=&quot;https://en.wikipedia.org/wiki/HyperTalk&quot;&gt;an
  &quot;English-like&quot; programming language&lt;/a&gt;, an endeavour which has
  been attempted many times but
  always &lt;a href=&quot;http://andykonwinski.com/applescript-the-most-unnatural-natural-language/&quot;&gt;ends
  in tears&lt;/a&gt;.&lt;/p&gt;

&lt;img src=&quot;/i/myst.jpg&quot; class=&quot;right&quot; alt=&quot;myst island&quot; /&gt;

&lt;p&gt;So as I&#39;ve thought a good next step for my own children, we
  happened to start playing the
  game &lt;a href=&quot;https://en.wikipedia.org/wiki/Myst&quot;&gt;Myst&lt;/a&gt;. Given
  my children&#39;s proclivities, this was immediately followed by Myst
  copycat worlds drawn out in elaborate detail with pen and paper the
  next day. I thought of what I could do to bring back the
  exploration and creativity of HyperCard, and eventually I got to
  &lt;a href=&quot;https://github.com/technomancy/cooper&quot;&gt;building my own
  implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The natural choice for this project was definitely
  the &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket&lt;/a&gt; language. While
  I&#39;m much more familiar with Clojure, it&#39;s a very poor fit for a
  first-time programmer, especially at a young age. Racket boasts
  lots of great learning material, but beyond the texts there&#39;s
  just an ever-present focus on usability and clarity that shines
  through in all aspects of the language and community.&lt;/p&gt;

&lt;img src=&quot;/i/drracket-error.png&quot; alt=&quot;drracket error&quot; align=&quot;left&quot; /&gt;

&lt;p&gt;Racket&#39;s roots lie with the famously-minimalistic Scheme, but it&#39;s grown
  to be a much more practical, expansive programming language. While
  there are still a few places in which its imperative roots show
  through, it has good support for functional programming and
  encourages good functional practice by default for the most
  part. (I hope to do a future post on a few ways to improve on its
  FP, both via
  the &lt;a href=&quot;https://github.com/greghendershott/rackjure&quot;&gt;Rackjure&lt;/a&gt;
  library and some
  of &lt;a href=&quot;http://p.hagelb.org/fstruct.rkt.html&quot;&gt;my own
  hacks&lt;/a&gt;.) But what really sets Racket apart is its solid tooling
  and libraries. I wouldn&#39;t put my kids down in front of Emacs, but
  Racket ships
  with &lt;a href=&quot;http://docs.racket-lang.org/drracket/index.html&quot;&gt;a
  very respectable IDE&lt;/a&gt; that&#39;s capable and helpful without being
  overwhelming. The GUI and drawing libraries that come with Racket
  have proven to be very useful and approachable for what I&#39;ve done
  so far.&lt;/a&gt;

&lt;p&gt;So
  far &lt;a href=&quot;https://github.com/technomancy/cooper&quot;&gt;Cooper&lt;/a&gt;, my
  HyperCard clone, is fairly simplistic. But in just over 500 lines
  of code, I have a system that supports manipulating stacks of cards,
  drawing backgrounds on them, and laying out buttons which can
  either navigate to other cards or invoke arbitrary functions.&lt;/p&gt;

&lt;p&gt;It&#39;s not sophisticated, but my children have already shown plenty
  of interest in using it to build out small worlds of their own in
  the cards. They&#39;ve so far been willing to put up with lots of
  glitches and poor performance to bring their imaginations to life,
  and I&#39;m hoping that this can gradually grow into a deeper
  understanding of how to think in a logical, structured way.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: I&#39;m not working on this any more, but I
  have &lt;a href=&quot;https://technomancy.itch.io/bussard&quot;&gt;another
  project&lt;/a&gt; which takes a different approach towards teaching
  programming. However, for approachable, kid-friendly
  storytelling-type programming I would strongly
  recommend &lt;a href=&quot;http://twinery.org&quot;&gt;Twine&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20keyboard%20science%20goes%20further</id>
    <published>2014-02-26T08:13:51Z</published>
    <updated>2014-02-26T08:13:51Z</updated>

    <link href="http://technomancy.us/173" rel="alternate" type="text/html"/>
    <title>in which keyboard science goes further</title>
    <content type="html">
      &lt;p&gt;My &lt;a href=&quot;/172&quot;&gt;last post&lt;/a&gt; documented my initial exposure to
  the wild world of custom keyboards and the numerous ways it&#39;s
  possible to improve on the conventional design. As I
  dug deeper into the topic, I was struck with the simplicity of the
  underlying concepts. While the Ergodox is a notable and admirable
  achievement of engineering, the techniques used in its design and
  construction are remarkably approachable to anyone with a bit of
  electronics experience, some DIY spirit, and access to a laser
  cutter. A few weeks ago I decided to try my own hand at keyboard
  design, and
  the &lt;a href=&quot;https://github.com/technomancy/atreus&quot;&gt;Atreus&lt;/a&gt; is
  the result.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; I have started 
  &lt;a href=&quot;http://atreus.technomancy.us&quot;&gt;selling kits&lt;/a&gt; if you
  want to build your own.&lt;/p&gt;

&lt;img src=&quot;/i/atreus.jpg&quot; alt=&quot;atreus keyboard&quot; /&gt;

&lt;p&gt;Since I already have an Ergodox, I thought about what kind of
  board would complement it. I have a few minor ideas about how its
  overall design might be improved[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;], but the
  main thing that bothered me about the Ergodox is that it made me
  really dissatisfied when I &lt;b&gt;wasn&#39;t&lt;/b&gt; using it&amp;mdash;going back
  to my internal laptop keyboard drove me nuts. I found the split
  halves and relatively large size (which are fantastic for
  stationary use at a desk) make me reluctant to use it on the
  lap, at a coffee shop, or on the couch, so that&#39;s the primary use
  case I&#39;ve targeted with the Atreus. It still has most of the other
  characteristics that make the Ergodox stand out, like
  mechanical Cherry switches, staggered columns instead of rows,
  heavy usage of the thumbs, and a hackable microcontroller with
  flexible firmware, but it&#39;s dramatically smaller and
  lighter[&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;].&lt;/p&gt;

&lt;img src=&quot;/i/atreus-layers.jpg&quot; alt=&quot;atreus acrylic layers&quot; class=&quot;right&quot; /&gt;

&lt;h4&gt;Construction&lt;/h4&gt;

&lt;p&gt;Layered acrylic is a popular material among DIY keyboard hackers,
  and for good reason. After taking a short workshop down at Metrix,
  I was able to design the case for this board
  in &lt;a href=&quot;http://inkscape.org&quot;&gt;Inkscape&lt;/a&gt; and get it cut in
  acrylic for only about $33 including materials. My first attempt
  used 6mm acrylic for the middle two layers, and with the laser at
  high power, a few of the key hole cuts got hot enough that they
  melted back together. They graciously offered to re-cut it and
  suggested something thinner, so I ended up with a 4.5mm switch
  mounting plate.&lt;/p&gt;

&lt;p&gt;Once I got the switches and keycaps mounted, I started to get a
  better feel for what it is like to use. It was apparent there were
  a couple minor mistakes in the case design: the two innermost
  thumb keys&#39; caps rubbed together when pressed, and the bottom-most
  thumb keys of the thumb column didn&#39;t have enough clearance
  against the next key up; pressing one would cause the one above it
  to depress. I have modified the case file to correct for this, but
  rather than re-cutting the switch plate I
  simply &lt;a href=&quot;https://secure.flickr.com/photos/43319799@N00/12668759915&quot;&gt;sanded
  out the top layer and middle keycaps&lt;/a&gt; a bit.&lt;/p&gt;

&lt;p&gt;If the heart of a keyboard is its microcontroller, then the matrix is
  its circulation system, connecting every key to the ones adjacent
  to it. Because a microcontroller has a limited number of pins, it
  takes &lt;a href=&quot;https://github.com/technomancy/tmk_keyboard/blob/atreus/keyboard/atreus/matrix.c&quot;&gt;a
  bit of cleverness to read every key&lt;/a&gt;. Each row of the matrix is
  wired into an output pin, and each column is wired into an input
  pin. The microcontroller cycles through the rows one-by-one,
  reading the state of each column to know which keys of the
  currently-active row are down. In my wiring below, I
  use red wires for the rows and black/grey down the columns, and
  then the bottom of each column is brought back to the
  microcontroller with ribbon cable.&lt;/p&gt;

&lt;img src=&quot;i/atreus-matrix.jpg&quot; alt=&quot;atreus matrix&quot; /&gt;

&lt;p&gt;The wiring of the matrix for me took just under four hours, but I
  made a number of silly first-timer mistakes that slowed me
  down. Each switch needs a diode to
  prevent &lt;a href=&quot;https://en.wikipedia.org/wiki/Rollover_(key)#Key_jamming_and_ghosting&quot;&gt;ghosting&lt;/a&gt;
  when multiple keys are pressed at once. My first attempt resulted
  in &lt;a href=&quot;https://secure.flickr.com/photos/43319799@N00/12642312163&quot;&gt;diodes
  wired in series&lt;/a&gt; in each row, but they need to be parallel down
  to each switch. When I was wiring the matrix back into the
  microcontroller, I flipped the board over, but I didn&#39;t flip the
  schematic in my head correspondingly. So I wired the right side of the
  board into the pins for the left. Once I realized what had
  happened, I was able
  to &lt;a href=&quot;https://github.com/technomancy/tmk_keyboard/blob/atreus/keyboard/atreus/keymap_atreus_mirror.c&quot;&gt;adapt
  the firmware to the new layout&lt;/a&gt; without rewiring the matrix,
  but I felt pretty foolish.&lt;/p&gt;

&lt;img src=&quot;/i/atreus-z.jpg&quot; alt=&quot;z on the atreus&quot; align=&quot;left&quot; /&gt;

&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;Typing prose on the board feels wonderful; it sits neatly in the
  lap with no fuss, and the keys are mostly
  reachable[&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;] without much
  stretching. Punctuation-heavy texts are still noticeably slower
  for me right now, which I&#39;m sure is a mix of unfamiliarity and the
  heavy reliance on the &lt;kbd&gt;fn&lt;/kbd&gt; key. I can&#39;t yet tell how much
  of the slowdown to attribute to each factor, but it will
  take a while to get up to full speed for non-letters. However,
  none of the punctuation needs
  both &lt;kbd&gt;fn&lt;/kbd&gt; &lt;b&gt;and&lt;/b&gt; &lt;kbd&gt;shift&lt;/kbd&gt;, so it&#39;s not as
  drastic as it might sound at first. In fact, the parentheses,
  brackets, and curly braces can all be hit on the home row
  with &lt;kbd&gt;fn&lt;/kbd&gt;, which is arguably more convenient for
  programmers than a conventional layout.&lt;/p&gt;

&lt;p&gt;The top three rows contain letters in Dvorak layout plus a few
  bits of punctuation, with modifiers etc. on the last row.&lt;/p&gt;

&lt;pre&gt;   &#39;     ,     .     p     y       ||       f     g     c     r    l
   a     o     e     u     i       ||       d     h     t     n    s
   ;     q     j     k     x       ||       b     m     w     v    z
  esc   tab  super shift bksp ctrl || alt space  fn     -     /  enter&lt;/pre&gt;

&lt;p&gt;The second layer is accessible with the &lt;kbd&gt;fn&lt;/kbd&gt; key.&lt;/p&gt;

&lt;pre&gt;   !     @     {     }    |        ||      pgdn   7     8     9    *
   #     $     (     )    `        ||      pgup   4     5     6    +
   %     ^     [     ]    ~        ||       &amp;amp;     1     2     3    \
  L2  paste  super shift bksp ctrl ||  alt space fn     .     0    =&lt;/pre&gt;

&lt;p&gt;It does go more smoothly with a few behavioural adjustments. For
  one, I&#39;ve started relying on the tab key less given its position
  on the lowest row under the ring finger. In a terminal, tab
  literally sends a &lt;kbd&gt;ctrl-i&lt;/kbd&gt; keycode, so I&#39;ve started to
  train myself to prefer that when coding. A
  few &lt;a href=&quot;https://github.com/technomancy/dotfiles/commit/856a638350a26b0cdb0bcc82042ed77a3fa4bdea&quot;&gt;tweaks
  to my dotfiles&lt;/a&gt; allowed me to use the same approach for my
  browser. Enter is a bit further than I&#39;d like, and Emacs lets you
  use &lt;kbd&gt;ctrl-m&lt;/kbd&gt; instead, so I&#39;m toying with that. I&#39;ve also
  modified my window manager so I can change workspaces without
  using the number keys. But my usage patterns revolve almost
  entirely around Emacs
  and &lt;a href=&quot;http://conkeror.org&quot;&gt;Conkeror&lt;/a&gt;, an Emacs-like
  browser with great support for rebinding keys on the fly. Some
  might have a more difficult time adapting, but on the other hand
  Vim users might actually have a better time given the reduced
  reliance upon modifiers.&lt;/p&gt;

&lt;p&gt;I&#39;m trying
  to &lt;a href=&quot;https://github.com/technomancy/atreus/blob/master/README.org#assembly&quot;&gt;ensure
  my steps are documented in detail&lt;/a&gt; so that others can replicate
  the design. The whole timeline for my build was about a week and a
  half
  from &lt;a href=&quot;https://github.com/technomancy/atreus/commit/25aa6809b5393f&quot;&gt;initial
  commit&lt;/a&gt; to working board[&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;], but much of
  that was spent waiting for staggered shipments to arrive. Probably
  the biggest open question around making it easy for others to
  replicate my work is that of access to a laser cutter. I&#39;m
  fortunate to live in Seattle where there are three or four
  hackerspaces in town offering their services, but I&#39;m not sure how
  difficult it is to get that sort of thing done elsewhere. For
  those that would need to order the case
  online, &lt;a href=&quot;http://ponoko.com&quot;&gt;Ponoko&lt;/a&gt; seems to offer
  this, but it costs a fair bit more, and you can&#39;t just bring in
  your own materials.&lt;/p&gt;

&lt;p&gt;Obviously there&#39;s no keyboard that&#39;s perfect for everyone. I
  still think the Ergodox may be a more balanced design, but
  this feels like the right set of trade-offs for a board that
  doesn&#39;t sit in one place. If anyone else tries their hand at
  putting one together I&#39;d love to hear how it goes; it should be a
  lot of fun.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; a few
other &lt;a href=&quot;http://geekhack.org/index.php?topic=57007.0&quot;&gt;intrepid&lt;/a&gt; &lt;a href=&quot;http://blog.tarn-vedra.de/2014/04/reproducing-keyboard-science_1707.html&quot;&gt;hackers&lt;/a&gt;
have documented the process of building their own Atreus keyboards
  from my designs.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; I&#39;ve also constructed &lt;a href=&quot;https://www.flickr.com/photos/technomancy/14004353426/in/photolist-nkvYnq-npeN94-nnr3be-nn9zYJ-nnth2q-kvyuPM-kvy8GB-kvy7q8-ktRRRX-ktRCjB-kmL1i8-kmMqG7-kivPLc-kiuGX6-kivjUp-kix7eb-kiuDbi-kiuC5k-kga9Xn-kcKiVP-kcLXLh&quot;&gt;a wooden variant&lt;/a&gt; that turned out nicely.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] The only thing I would change about the
  Ergodox is the fact that the thumb cluster is on the same plane as
  the rest of the board. It would fit human opposable thumbs better
  if it were angled down
  like &lt;a href=&quot;http://geekhack.org/index.php?topic=49721.0&quot;&gt;this
  remarkable design&lt;/a&gt;, but that raises some pretty serious
  challenges in case and PCB design since you can no longer use
  layered acrylic with a single circuit board per side.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn2&quot;&gt;2&lt;/a&gt;] The case measures 25x11cm. My build weighs
  380g, though building it with acrylic layers of different
  thickness or even other materials entirely would change that.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn3&quot;&gt;3&lt;/a&gt;] The exceptions being the bottom row keys
  that aren&#39;t under the thumbs. The outermost two on each side are a
  bit of a stretch for the ring and pinkies, and the next one in can
  be hit with the thumb, but not as conveniently as the other thumb
  keys.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn4&quot;&gt;4&lt;/a&gt;] I documented my progress as I went
  on &lt;a href=&quot;http://geekhack.org/index.php?topic=54759.0&quot;&gt;this
  GeekHack thread&lt;/a&gt;. I got a lot of good suggestions both from
  there and the &lt;tt&gt;#geekhack&lt;/tt&gt; channel on freenode, so thanks to
  those good folks. More photos
  are &lt;a href=&quot;https://secure.flickr.com/photos/technomancy/tags/atreus/&quot;&gt;on
  Flickr&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20a%20collection%20of%20keys%20are%20gathered%20and%20put%20to%20good%20use</id>
    <published>2013-12-21T13:35:45Z</published>
    <updated>2013-12-21T13:35:45Z</updated>

    <link href="http://technomancy.us/172" rel="alternate" type="text/html"/>
    <title>in which a collection of keys are gathered and put to good use</title>
    <content type="html">
      &lt;p&gt;Choosing computer hardware is really all about trade-offs. For
  the kind of work I do these days once a machine has an SSD in it
  nearly anything will get me the performance I need. So I start to
  look towards creature comforts&amp;mdash;the keyboard and screen are
  the gateways from the physical world into the machine, and for the
  amount of time I spend with them, it makes sense to get the best
  that money can buy. This rules out glossy screens and the
  low-resolution laptop displays that have become ubiquitous in
  recent years, so my options have been limited.&lt;/p&gt;

&lt;p&gt;Last year I &lt;a href=&quot;/160&quot;&gt;took a chance on a new laptop&lt;/a&gt;:
  the Samsung Series 9 wooed me with its bright, relatively
  high-resolution matte screen, and I took a chance on it even knowing
  that its keyboard was a step backwards. This turned out to
  be a mistake for me&amp;mdash;the trend of thinness over all else
  forced its designers into some unfortunate compromises around the
  keyboard. There just isn&#39;t enough room on an ultrabook for keys
  that have a comfortable travel, to speak nothing of the
  response. So I went back to my 2009-era Thinkpad with its adequate
  screen and decent keyboard, since newer Thinkpads sported brighter
  screens but significantly fewer pixels.&lt;/p&gt;

&lt;img src=&quot;/i/buckling-spring.png&quot; alt=&quot;buckling spring&quot; class=&quot;right&quot; /&gt;

&lt;p&gt;It wasn&#39;t always this difficult to find nice
  keyboards. Relentless cost-cutting has pushed manufacturers
  towards keyboards built mostly out of rubber underneath the caps
  and forced quality key switches to a niche populated mostly by
  gamers and obsessive programmers like me. But if you&#39;re
  willing to do some digging, you can find some fantastic
  options. The standard bearer here for a long time has been the
  venerable &lt;a href=&quot;https://en.wikipedia.org/wiki/Model_M_keyboard&quot;&gt;IBM
  Model M&lt;/a&gt; with its buckling spring mechanism. Though IBM hasn&#39;t
  sold them since the mid-90s, many extant keyboards from that time
  are still in daily use. They offer a solid, tactile response
  that evokes a passionate fondness in their users.&lt;/p&gt;

&lt;p&gt;I&#39;d heard the breathless enthusiasm with which the fans spoke
  of their gear, but I&#39;d delayed taking the plunge myself because
  I&#39;ve never been comfortable on the standard form factor shared by
  nearly all mechanical keyboards. After being hit by RSI in
  college, I went from the ergonomic-but-cheap Microsoft Natural
  keyboard to the
  good-for-a-rubber-dome &lt;a href=&quot;http://www.kinesis-ergo.com/freestyle2.htm/&quot;&gt;Kinesis
  Freestyle&lt;/a&gt;[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;], which had a lousy key response but was the best I
  could find for under US$100. For a long time the only mechanical
  split keyboard I could find was the
  legendary &lt;a href=&quot;http://www.kinesis-ergo.com/advantage.htm&quot;&gt;Kinesis
  Advantage&lt;/a&gt;, which apart from its US$300 price tag kept me at
  bay due to its massive size&amp;mdash;I work from &lt;a href=&quot;/156&quot;&gt;local
  coffee shops&lt;/a&gt; frequently, and the Advantage is just too clunky
  to toss in a bag and tote around.&lt;/p&gt;

&lt;p&gt;But over the summer someone on the &lt;tt&gt;#emacs&lt;/tt&gt; freenode
  channel brought my attention to the
  mysterious &lt;a href=&quot;http://ergodox.org&quot;&gt;Ergodox&lt;/a&gt; project.&lt;/p&gt;

&lt;img src=&quot;/i/ergodox-1.png&quot; alt=&quot;ergodox&quot; /&gt;

&lt;p&gt;The Ergodox is a project to create a freely-licensed ergonomic
  mechanical keyboard design that can be built by anyone. The site,
  while very sparse on details of what&#39;s really going on, contains
  links to &lt;a href=&quot;http://ergodox.org/Hardware.aspx&quot;&gt;everything you
  need&lt;/a&gt; to source and assemble your own keyboard. Apart from a
  parts list, the schematics for the printed circuit board are
  freely downloadable and GPL-licensed. The casing comes in
  3D-printed and laser-cut acrylic variants you can have constructed
  at &lt;a href=&quot;http://wiki.metrixcreatespace.com/&quot;&gt;your local maker
  space&lt;/a&gt;,
  and &lt;a href=&quot;https://github.com/benblazak/ergodox-firmware&quot;&gt;the
  firmware is on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is great news for the adventurous maker, but I&#39;ve only
  got &lt;a href=&quot;/171&quot;&gt;the most basic experience building
  electronics&lt;/a&gt;. Sourcing all those parts and getting the circuit
  board &lt;a href=&quot;http://oshpark.com/&quot;&gt;printed&lt;/a&gt; myself felt
  daunting. Luckily I discovered a company
  called &lt;a href=&quot;http://www.massdrop.com&quot;&gt;Massdrop&lt;/a&gt; was
  organizing group buys which could get all the parts needed at a
  significant discount. The only problem was the group buys only
  opened up for a limited time, and there was a pretty serious
  turnaround time before delivery. As my luck had it I got in on a
  group buy which hit some snags in the fulfillment process and
  ended up having to wait from August to December for my kit to
  arrive. (I later found out there&#39;s another group buy to get just the
  circuit boards, which would have been an interesting way to go.)
  But to my great delight it finally came last week.&lt;/p&gt;

&lt;a href=&quot;https://secure.flickr.com/photos/technomancy/11396853655/in/photostream/&quot;&gt;
  &lt;img src=&quot;/i/ergodox-assembly.jpg&quot; alt=&quot;assembly&quot; align=&quot;left&quot; /&gt;&lt;/a&gt;

&lt;p&gt;For the drop I participated in Massdrop offered an optional
  partial assembly service. For a small fee the board would have all
  the diodes and the microcontroller pre-soldered, so you&#39;d only
  have to solder the switches. Since the diodes are of the
  tiny &lt;a href=&quot;https://en.wikipedia.org/wiki/Surface-mount_technology&quot;&gt;surface-mount&lt;/a&gt;
  variety, previous bad experience with surface-mount components
  prompted me to opt for the partial assembly. This ended up
  resulting in several extra weeks of delay, and for the most recent drop
  the assembly options have not been offered. But once I got my kit,
  soldering the switches only took around an hour. After another ten
  minutes I had all the caps on[&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;] (with some help as pictured) and
  the case assembled and was ready to
  roll. I&#39;ve &lt;a href=&quot;http://rossipedia.com/blog/2013/06/ergodox-mechanical-keyboard-review/&quot;&gt;heard&lt;/a&gt;
  &lt;a href=&quot;http://jaymatter.com/blog/2013/12/01/ergodox/&quot;&gt;reports&lt;/a&gt;
  of others that were new to soldering were able to handle the SMD
  diodes without too much trouble, so maybe my concern was
  unwarranted. But adding in time for the diodes does bring the
  total assembly time up to five or six hours. Massdrop
  provides &lt;a href=&quot;https://www.massdrop.com/ext/ergodox/assembly&quot;&gt;detailed
  instructions&lt;/a&gt; covering the assembly process, and various users
  have created video tutorials as well.&lt;/p&gt;

&lt;p&gt;I mentioned
  the &lt;a href=&quot;https://github.com/benblazak/ergodox-firmware&quot;&gt;hackable
  firmware&lt;/a&gt; earlier&amp;mdash;this is really one of the things that
  sets the Ergodox apart. The keyboard embeds
  a &lt;a href=&quot;http://www.pjrc.com/teensy/index.html&quot;&gt;Teensy 2
  board&lt;/a&gt;, an 8-bit Arduino-compatible microcontroller with more
  processing power
  than &lt;a href=&quot;https://en.wikipedia.org/wiki/Apollo_Guidance_Computer&quot;&gt;the
  computers that took the Apollo projects to the moon&lt;/a&gt;. Massdrop
  helpfully provides a
  fantastic &lt;a href=&quot;https://www.massdrop.com/ext/ergodox&quot;&gt;web-based
  configuration tool&lt;/a&gt; that can compile and spit out firmware for
  the microcontroller based on the keys you&#39;ve specified.&lt;/p&gt;

&lt;a href=&quot;https://www.massdrop.com/ext/ergodox/?referer=NCVLBE&amp;hash=388aaf52db3e7e0fd3efd99d2d007458&quot;&gt;
  &lt;img src=&quot;/i/ergodox-layout.png&quot; alt=&quot;my current layout&quot; /&gt;&lt;/a&gt;

&lt;p&gt;I&#39;ve got it configured with a basic dvorak layout with several of
  my more commonly-used function keys around the edges of the thumb
  clusters. As a lisp hacker it was exciting for me to have
  unshifted parentheses keys on my thumbs. As
  a &lt;a href=&quot;http://www.emacswiki.org/emacs/ParEdit&quot;&gt;Paredit&lt;/a&gt;
  user I put the open paren closer to the thumb resulting in a
  weird-looking backwards configuration, because I rarely hit the
  close paren key. (Unfortunately unshifted parentheses can&#39;t be
  added in the web configurator; you have
  to &lt;a href=&quot;https://github.com/technomancy/ergodox-firmware/commit/6e0409d&quot;&gt;patch
  and build&lt;/a&gt; the firmware yourself. I had a Teensy development
  environment set up
  from &lt;a href=&quot;http://www.flickr.com/photos/43319799@N00/9522005426&quot;&gt;a
  previous project&lt;/a&gt; so this wasn&#39;t a big deal for me, but the
  convenience of the web configurator is very much appreciated when
  getting started.) Having enter and backspace on the thumbs is
  handy, but I found the outer layer of the thumb cluster is too far
  to hit when touch-typing, so putting my music controls there made
  sense. The code also supports shifting to other layers if you
  need more space. So far I&#39;ve been comfortable with mostly just one
  layer, but I have a second layer with the full set of function
  keys and arrows for the rare occasions when those are needed.&lt;/p&gt;

&lt;p&gt;The feel of a keyboard is obviously a really subjective
  thing. There&#39;s no one-size-fits-all, but
  the &lt;a href=&quot;http://deskthority.net/wiki/Cherry_MX_Blue&quot;&gt;Cherry MX
  blue switches&lt;/a&gt; are really growing on me and already bring me
  some disappointment when I have to go back to my internal Thinkpad
  keyboard. But the layout takes a lot of getting used to. In
  particular the fact that it&#39;s staggered vertically instead of
  horizontally makes for an awkward adjustment period. Early
  typewriter designers staggered each row in order to avoid jams
  when the levers came up to strike the paper. Like many other
  quirks of early technology, this design has stuck around far
  longer than the reasons behind it. The Ergodox staggers each
  column instead in order to match up with human physiology: each
  finger is of a different length, so the column for the middle and
  longest finger is shifted up a bit higher, etc. It makes a lot of
  sense, but even after several days of on-and-off usage I still
  make lots of typos on the bottom row of my left hand. Though it&#39;s
  more effective to move lots of things over to the thumbs, I
  recommend leaving things like control, tab, and shift where you&#39;re
  used to them until you get over the disorientation of the new
  alignment.&lt;/p&gt;

&lt;a href=&quot;https://secure.flickr.com/photos/technomancy/11526060936/&quot;&gt;
  &lt;img src=&quot;/i/ergodox-colored-caps.jpg&quot; alt=&quot;colored caps&quot; /&gt;&lt;/a&gt;

&lt;p&gt;The Ergodox project appeals to me on a lot of levels: the open
  licensing[&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;], the customizablility, the
  hands-on electronics[&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;], and the
  unconventional, human-oriented design. It&#39;s probably not for
  everyone, but if you&#39;ve a professional programmer who&#39;s never
  given your keyboard a second thought, maybe it&#39;s time to broaden
  your horizons. They should be opening up the group buy for another
  batch in the near future...&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: I&#39;ve &lt;a href=&quot;/173&quot;&gt;designed by own keyboard&lt;/a&gt;,
  which is meant to be a smaller, more travel-friendly complement to
  the Ergodox that shares a lot of its characteristics.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[&lt;a name=&quot;fn1&quot;&gt;1&lt;/a&gt;] Though I can hardly stand the mushy key
  response these days, I have a soft spot in my heart for the MS
  Natural 4000 since it brought me significant relief from my RSI
  symptoms. Using it for several months taught me to angle my hands
  in correctly, a habit that I was able to take with me even when I
  started using other keyboards. Originally I kept my hands
  positioned like the photo below, but the shape of the
  Natural taught me to angle my fingers differently (pinky curled in
  and index finger extended out) so I could keep my wrists straight
  and still have my fingers rest in the home row position.&lt;/p&gt;

&lt;img src=&quot;/i/bad-angle.jpg&quot; alt=&quot;bad angle&quot; style=&quot;float: left&quot; /&gt;

&lt;p&gt;That said if you are looking for a comfortable keyboard and
  aren&#39;t ready to spend over US$100 for something mechanical I would
  recommend the Kinesis Freestyle; even though it&#39;s still a
  rubber-dome switch it&#39;s got a crisper response than most and
  allows for you to keep your forearms totally straight.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn3&quot;&gt;2&lt;/a&gt;] The DSA (spherically-shaped cupped tops)
  keycap set that Massdrop offers doesn&#39;t include &quot;homing bumps&quot; for
  the keys under the index fingers, making it a bit tricky to get
  your bearing on the keyboard without looking down at your hands. I
  picked up a couple white caps with homing dots from Signature
  Plastics (matching black wasn&#39;t an option) and then went ahead and
  swapped the rest of the home-row with white as well along with a
  nice bright red Esc just for good measure. The only further
  hardware modification I have planned is changing out the switches
  under the pinky modifiers
  with &lt;a href=&quot;http://deskthority.net/wiki/Cherry_MX_Brown&quot;&gt;Cherry
  MX brown&lt;/a&gt; switches, which require less force and should reduce
  pinky fatigue.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: I&#39;ve replaced the switches on the outermost
  columns: the modifiers (shifts and ctrl next to the A key) are
  Cherry MX reds (lower-force and no tactile bump) since I don&#39;t
  feel like tactile response makes sense for modifiers. For the
  non-modifiers I&#39;m using browns which are tactile and lower-force
  without being loud; the idea was to reduce strain on the weak
  pinky fingers. I don&#39;t feel like the browns make all that much of
  a difference, but I like the feel of having linear switches for
  modifiers. I&#39;ve also replaced the modifiers under my thumbs with
  Cherry MX black switches, which are like the reds but with heavier
  springs since the thumb is the strongest finger.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn3&quot;&gt;3&lt;/a&gt;] There have already been a number of further
  designs based on the Ergodox design, including
  the &lt;a href=&quot;http://deskthority.net/workshop-f7/acidfire-s-custom-keyboard-aka-the-grand-piano-t6019.html&quot;&gt;&quot;Grand
  Piano&quot;&lt;/a&gt; and
  this &lt;a href=&quot;http://blog.fsck.com/2013/12/better-and-better-keyboards.html&quot;&gt;incredible
  string of prototypes&lt;/a&gt; culminating in a
  soon-to-be-kickstarted &lt;a href=&quot;http://keyboard.io&quot;&gt;production run
  at http://keyboard.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[&lt;a name=&quot;fn4&quot;&gt;4&lt;/a&gt;] What&#39;s really eye-opening about putting a
  keyboard together is that you discover there&#39;s really no magic
  behind it. It&#39;s just a grid of switches wired into a
  microcontroller. Since microcontrollers don&#39;t have enough pins to
  detect each switch individually, there&#39;s a
  clever &lt;a href=&quot;http://pcbheaven.com/wikipages/How_Key_Matrices_Works/&quot;&gt;matrix
  wiring&lt;/a&gt; employed; each hand has six rows and seven columns
  where each row and column is wired to a pin. The microcontroller
  then scans each column by bringing all the column outputs except
  one low and then checking to see which row inputs are high. It can
  only technically scan one column at a time, but it&#39;s able to
  rotate through them so quickly that it&#39;s indistinguishable from
  simultaneous reads to a human. The same multiplexing approach is
  used for controlling
  an &lt;a href=&quot;https://en.wikipedia.org/wiki/Dot_matrix#LED_matrix&quot;&gt;LED
  matrix&lt;/a&gt; with a limited number of pins. It&#39;s all there in the
  code for when you get curious.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20hardware%20heats%20things%20up</id>
    <published>2013-11-24T15:05:43Z</published>
    <updated>2013-11-24T15:05:43Z</updated>

    <link href="http://technomancy.us/171" rel="alternate" type="text/html"/>
    <title>in which hardware heats things up</title>
    <content type="html">
      &lt;p&gt;As a remote hacker, I spend a fair bit of time in
  my &lt;a href=&quot;http://www.flickr.com/photos/technomancy/tags/laboratory&quot;&gt;code
  lab&lt;/a&gt; when I&#39;m
  not &lt;a href=&quot;http://www.flickr.com/photos/technomancy/tags/remoteoffice&quot;&gt;out
  and about around Seattle&lt;/a&gt;. It&#39;s great to have a space away from
  the rest of the house where I can work in isolation, but around
  this time of year in the Northern hemisphere the temperatures
  start to drop. I&#39;ve had a powerful wall heater in the lab for a
  while now, but some days I&#39;d be a little reluctant to head out
  across the frost-covered lawn since the heater takes 20-30 minutes
  before it really gets things comfortable on a cold day.&lt;/p&gt;

&lt;p&gt;I&#39;ve
  been &lt;a href=&quot;http://www.flickr.com/photos/43319799@N00/9522005426&quot;&gt;getting
  my feet wet with hardware hacking&lt;/a&gt; the past few months, so to
  me the problem was practically begging to be solved with a little
  applied technology. Of course there are plenty of of-the-shelf
  devices that can toggle a 110V outlet, but the particular heater
  I&#39;m using is wired directly into 220V mains, calling for a custom
  solution. I recently built
  a &lt;a href=&quot;https://secure.flickr.com/photos/technomancy/10982587913/&quot;&gt;binary
  clock for my car&lt;/a&gt; using a Raspberry Pi, so I&#39;d had a bit of
  experience with embedded Linux boards. For this project I ended up
  choosing
  the &lt;a href=&quot;http://beagleboard.org/Products/BeagleBone%20Black&quot;&gt;BeagleBone
  Black&lt;/a&gt;, an impressive board costing only US$10 more than the Pi
  but packing in a lot more power as well as boasting a Creative
  Commons-licensed hardware design. Of course an Arduino could have
  worked here too, but once you add Ethernet to the cost of an Uno
  it ends up costing nearly as much and would have offered much
  more limited language and library support.&lt;/p&gt;

&lt;img src=&quot;i/bbb-wall.jpg&quot; alt=&quot;beaglebone black&quot; /&gt;

&lt;p&gt;I ended up with this little board running Debian with
  an &lt;a href=&quot;https://www.adafruit.com/products/165&quot;&gt;temperature
  sensor&lt;/a&gt; in its analog input and
  a &lt;a href=&quot;http://www.fotek.com.hk/solid/SSR-1.htm&quot;&gt;solid-state
  relay&lt;/a&gt; hooked up to one of the GPIO pins. The analog input is
  the main thing that makes this a much better fit for the
  BeagleBone than a Pi; all the inputs on the Pi are digital, which
  would have made reading the temperature more
  complicated. Unfortunately the input to the relay won&#39;t trigger
  with less than 7.5ma, so it was necessary to hook it into SYS 5V
  (the taped wire above) and toggle it by way of an NPN transistor
  in between the relay&#39;s negative terminal and the board&#39;s
  ground. Disclaimer: working with mains power is dangerous; be sure
  to switch off the appropriate circuit breaker before you touch any
  of the high-voltage wires.&lt;/p&gt;

&lt;img src=&quot;i/relay.jpg&quot; alt=&quot;heater relay&quot; align=&quot;left&quot; /&gt;

&lt;p&gt;In order to control the relay, I put
  together &lt;a href=&quot;https://github.com/technomancy/prometheus&quot;&gt;an
  Erlang XMPP bot&lt;/a&gt; which monitors the current temperature and
  switches the GPIO pin on or off accordingly depending on the
  target temperature. The target temperature can be set by messaging
  the bot, and the current temperature can be queried as well. The
  GitHub repo contains a few schematics along with more detailed
  instructions on how it was built.&lt;/p&gt;

&lt;p&gt;There&#39;s still a bit more I&#39;d like to do with it. Right now it&#39;s a
  pretty lame Erlang app that doesn&#39;t use any fancy OTP features to
  improve reliability, so a lost connection to the XMPP server can
  cause downtime. This is supposedly something OTP makes really
  easy; I just need to read through the appropriate chapters
  in &lt;a href=&quot;http://learnyousomeerlang.com&quot;&gt;Learn You Some
  Erlang&lt;/a&gt;. In addition I&#39;d like to get logging in place; it would
  be useful to be able to plot temperatures over
  time. &lt;b&gt;Update&lt;/b&gt;: it&#39;s now a proper OTP app with temperature
  logs in place.&lt;/p&gt;

&lt;p&gt;I&#39;m having a lot of fun with it, and I&#39;m loving how I can just
  walk out to the shed and have it toasty right upon entry. It feels
  like a great practical project where a bit of hacking can really
  make life more convenient.&lt;/p&gt;
    </content>
  </entry>
  
  <entry xml:base="http://technomancy.us">
    <author><name>Phil Hagelberg</name></author>
    <id>tag:technomancy.us,2007:in%20which%20we%20return%20to%20the%20realm%20of%20the%20bactrian</id>
    <published>2013-10-14T07:35:57Z</published>
    <updated>2013-10-14T07:35:57Z</updated>

    <link href="http://technomancy.us/170" rel="alternate" type="text/html"/>
    <title>in which we return to the realm of the bactrian</title>
    <content type="html">
      &lt;p&gt;A few years ago I &lt;a href=&quot;/152&quot;&gt;picked up a bit of OCaml&lt;/a&gt; in
  order to put together a small, fast-launching GUI program. I had a
  lot of fun with that specific program, but soon afterward I
  dropped OCaml for general use because it was very awkward to pull
  in third-party code from outside the standard library. A month or
  two ago, a co-worker told me he was learning OCaml and mentioned
  that things had come a long way in the past few years. I was
  pleasantly surprised that not only had
  a &lt;a href=&quot;https://realworldocaml.org/&quot;&gt;creative-commons licensed
  book&lt;/a&gt; been written, but the library situation was vastly
  improved with the introduction
  of &lt;a href=&quot;http://opam.ocamlpro.com/&quot;&gt;OPAM&lt;/a&gt;, a fully
  respectable package manager.&lt;/p&gt;

&lt;p&gt;In my mind OCaml is an excellent complement to Clojure by filling
  many of Clojure&#39;s weak places. Startup time, distributable/runtime
  size, type inference, and C integration are all fantastic in OCaml
  but often unsatisfactory in Clojure, while true concurrency, library
  availability, flexible/clear syntax, and size of the community are
  places Clojure has the edge and OCaml is very weak in.&lt;/p&gt;

&lt;img src=&quot;i/battery-gears.jpg&quot; /&gt;

&lt;p&gt;When we&#39;ve &lt;a href=&quot;http://lein-survey-2013&quot;&gt;polled Leiningen
  users&lt;/a&gt; in the past, the top complaint has always been startup
  time. Most people just keep a running repl in their editor, but
  this makes certain workflows awkward. My latest project, called
  &lt;a href=&quot;http://leiningen.org/grench.html&quot;&gt;Grenchman&lt;/a&gt;, addresses
  that problem by offering a fast-launching executable that connects
  directly to a running Clojure process and sends it code over the
  &lt;a href=&quot;https://github.com/clojure/tools.nrepl&quot;&gt;nREPL&lt;/a&gt;
  protocol.&lt;/p&gt;

&lt;p&gt;I was able to implement the first release of Grenchman in a few
  weeks with about 400 lines of OCaml while basically re-learning
  the language from scratch with the
  excellent &lt;a href=&quot;https://realworldocaml.org/&quot;&gt;Real World
  OCaml&lt;/a&gt; book. My experience with the language has been very
  positive. Obviously the type system is the primary thing for which
  OCaml is notable, and with good reason. It&#39;s unobtrusive for the
  most part, and in my experience nearly every time the compiler
  complained, it was because of something stupid I had done. If
  you&#39;ve used a static type system without inference, or even one
  that works on locals only, don&#39;t let bad experiences there put you
  off&amp;mdash;the seamlessness of full Hindley-Milner inference is
  totally different.&lt;/p&gt;

&lt;p&gt;The widespread use of the
  &lt;a href=&quot;https://ocaml.janestreet.com/?q=node/78&quot;&gt;Option type&lt;/a&gt;
  (often called Maybe in other languages) stands out as a
  particularly helpful feature of the type system. Rather than
  allowing &lt;tt&gt;nil&lt;/tt&gt; values to propagate through your program
  until someone tries to do something with them, any operation that
  could fail to return a sensible result requires you to deal with
  it explicitly before it will compile. It&#39;s occasionally a little
  more verbose, but it prevents all kinds of shortcuts in less
  strict languages (static and dynamic) that can obscure the root
  cause of subtle bugs. The certainty you get from consistent use
  of &lt;tt&gt;Option&lt;/tt&gt; is similar to the easier-to-reason-about
  properties of referential transparency&amp;mdash;there&#39;s a dimension
  of error-prone guesswork around failure semantics which simply
  evaporates.&lt;/p&gt;

&lt;img src=&quot;i/garden-of-the-gods.jpg&quot; align=&quot;left&quot; /&gt;

&lt;p&gt;That said, the type system isn&#39;t without its trade-offs. Any
  program that does communication with outside systems typically has
  &quot;edges&quot; where the compiler can&#39;t infer much about the data which
  originates outside those boundaries. In the case of Grenchman
  there is very little explicit mention of types, but acting on the
  Bencode-formatted messages sent from the Clojure server requires
  some explicit typing. Wrapper types are introduced in order for
  Strings and Lists and so on to be able to partake in the Bencode
  type, and these must be removed before the underlying values can
  be consumed. In more common serialization formats like JSON and
  XML, the wrapping and unwrapping code can be auto-generated from
  schemas, but Bencode is a more obscure format lacking in such
  luxuries.&lt;/p&gt;

&lt;p&gt;The other place types must be made explicit is when interfacing
  with C functions. I used
  the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/&quot;&gt;Ctypes&lt;/a&gt;
  library in order to make calls
  to &lt;a href=&quot;https://www.gnu.org/software/readline/&quot;&gt;GNU
  Readline&lt;/a&gt;, and I greatly appreciated the ability to invoke that
  functionality directly instead of
  using &lt;a href=&quot;http://cristal.inria.fr/~ddr/ledit/&quot;&gt;a
  port&lt;/a&gt;. That said, I had a difficult time getting it to work,
  partly due to the slim documentation and partly due to my own
  unfamiliarity with the calling conventions of C libraries.&lt;/p&gt;

&lt;p&gt;One of the things which drew me to OCaml initially was the
  ability to compile small, easily-distributable native
  executables. This ended up turning out a little differently from
  my expectations for a few reasons. Firstly the use of Ctypes meant
  that I couldn&#39;t statically link everything&amp;mdash;Ctypes is built
  upon &lt;a href=&quot;https://sourceware.org/libffi/&quot;&gt;libffi&lt;/a&gt; and
  dynamically loads libreadline, making cross-distribution
  compatibility &lt;a href=&quot;http://lists.ocaml.org/pipermail/ctypes/2013-October/000013.html&quot;&gt;much
  more complicated&lt;/a&gt;. But most OCaml programs won&#39;t run into that
  problem unless they need access to C code.&lt;/p&gt;

&lt;p&gt;However, Grenchman is built on
  the &lt;a href=&quot;http://janestreet.github.io/&quot;&gt;Core and Async&lt;/a&gt;
  libraries from &lt;a href=&quot;https://ocaml.janestreet.com/&quot;&gt;Jane
  Street&lt;/a&gt;, one of the largest industrial users of OCaml. Async
  allows for monadic faux-concurrency that avoids a lot of the
  callback headaches of other event-driven tools, but it is fairly
  monolithic. This affects the size of the binaries emitted from
  OCaml&#39;s native compiler; even after running &lt;tt&gt;strip(1)&lt;/tt&gt; on
  them they were still between 8.5 and 11MB. The book I was using
  cheats a bit and treats Jane Street Core as OCaml&#39;s standard
  library, which is nice because it results in code that&#39;s a lot
  more consistent and clean than it would be with OCaml&#39;s actual
  standard library, but the associated size trade-offs are
  unfortunate, and I wish they had been stated up-front.&lt;/p&gt;

&lt;p&gt;While OPAM is fairly impressive and a huge improvement over the
  state of things two years ago, a couple things about it still
  bother me. One annoyance is that it&#39;s entirely source-based, so
  installing new packages can take a very long time. One impressive
  feature of OPAM is that it can handle installation and compilation
  of the OCaml compiler itself (and switching between separate
  versions), but this means pulling in a full dev stack for a given
  project can take as much as an hour. This isn&#39;t a huge deal
  though, and if I had to pick one I&#39;d rather have a source-only
  package manager than the other way around. Creating a system that
  reliably deals in both source and binaries is very difficult. More
  worrying is the fact that it seems to encourage a &quot;yeah, just get
  me the latest version of that&quot; approach to versioning rather than
  defaulting to declaring explicit dependency versions. (It&#39;s
  possible to pin to specific versions, but this was only mentioned
  in passing, tucked away on the &quot;Advanced&quot; section of the docs, so
  I assume its use is rare.) This pattern is unrealistically
  optimistic in practice and caused lots of headaches in
  Rubygems. It was eventually be abandoned in favour of Bundler, but
  only after a very long and awkward transition phase. Hopefully the
  OCaml community can make this shift more gracefully than the
  Rubyists did by learning from their mistakes.&lt;/p&gt;

&lt;p&gt;I can&#39;t say I&#39;ve written lots of code in OCaml yet, but I&#39;ve
  really enjoyed it so far. The extra help the compiler gives you
  allowed me to make some fairly major changes in Grenchman with a
  high degree of confidence, and being able to read type signatures
  in the libraries I was using usually made up for a general lack of
  documentation. If you&#39;ve been thinking about picking up a new
  language, now is a great time to start with OCaml given the book
  and package manager.&lt;/p&gt;
    </content>
  </entry>
  
</feed>
