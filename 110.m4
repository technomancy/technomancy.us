dnl -*- html -*-
define(__timestamp, 2008-06-04T09:32:42Z)dnl
define(__title, `in which the events of and surrounding cabooseconf are recapitulated')dnl
define(__id, 110)dnl
include(header.html)
<p>Over the weekend I spent some time with thousands of geeks in Portland as RailsConf was held at the Oregon Convention Center. While I always enjoy these kinds of events immensely, I usually have just as much fun with the socializing aspect as I do with the actual conference material. So this year I decided just to head over to <a href='http://conference.caboose.org'>CabooseConf</a> and only attend the &quot;hallway track&quot; at the main event.</p>
<img src='http://technomancy.us/i/portland_boardwalk.jpg' alt='portland skyline' align='left' />
<p>As usual, Portland was the ideal host city for the conference. It's beautifully green in a way that makes it simply refreshing to walk through. The convenience of getting around would have been better for me personally if I had thought to book a hotel closer to the Max line, but no US city that I've been to does visitor-friendly better than Portland. It came as a major disappointment to hear that it might head to the wastelands of Nevada next year&mdash;yuck.</p>
<p>CabooseConf was a really low-key string of hackfests put on by the folks at <a href='http://entp.com'>ENTP</a>. Even if it didn't seem too lively at first glance, the room kept humming with a quiet energy of hackers working on big ideas. Getting that many bright people together is bound to spark all the right kinds of conversations.</p>
<p>I greatly enjoyed finally getting to meet <a href='http://blog.jdhuntington.com'>JD</a>, the other main Bus Scheme contributor and welcoming the enthusiastic <a href='http://6brand.com/'>Jack Danger Canty</a> to the team. I had hoped to start adding support for macros to Bus Scheme, but the work I started in that direction revealed some weaknesses deep in the implementation. The code has much more internal consistency now (we changed a huge amount of code over from using Arrays to internally represent code to using Lists) and is pretty solid. Jack has actually deployed <a href='http://jackcanty.com/'>the first Bus Scheme web app in the wild</a> as his home page, which is a noteworthy milestone. I've begun support for macros but am still a ways away from getting that totally ready. Scheme macros are fairly different from Common Lisp or Elisp's version, so it's taken some learning.</p>
<p>If you've read anything about RailsConf this year, you've doubtless heard a lot of people excited about MagLev, a new upcoming Ruby implementation. Since I didn't go to any of the talks I didn't see the demo, but I've <a href='http://headius.blogspot.com/2008/06/maglev.html'>read enough</a> to be skeptical. I know for a fact that the world of Smalltalk has a lot of amazing technology around it that would really benefit Rubyists. But the way people go on about MagLev like it's going to solve everyone's problems with its 60x performance boost is really short-sighted. The obvious bit is that they haven't given anyone any reason to think they've got a system that supports Ruby's object model and execution semantics on anything other than a very superficial level. It's easy to optimize microbenchmarks to get 60x speed boosts like MagLev claims if you don't allow for the dynamicity of Ruby, and MagLev has so far made no claims towards being able to run (let alone pass) any of the Ruby specs.</p>
<p>But this is really just a side-effect of the real problem: There is absolutely no transparency into the development cycle of MagLev. We're seeing a group of engineers who are grounded in a 1980's mindset of &quot;let's demo this technology we're working on to a bunch of potential customers&quot; rather than entering into the Ruby community and approaching us as a group of hackers. We don't value slick demos and impressive statistics; <b>we value code</b> and code alone. We have learned the mistakes of single-vendor reliance, some of us by observation and some of us by painful experience. Even Sun learned that people won't put up with it. No&mdash;even <i>Microsoft</i> isn't daring to suggest that you use a Ruby implementation that ties you into their proprietary software stack.</p>
<img src='http://technomancy.us/i/github_machine.jpg' alt='pay to github' />
<p>The really crazy thing about the whole issue is that it reveals an idea that somehow it's difficult to make money with a really excellent piece of free software. It blows my mind that people still think this in AD 2008. People will trip over themselves to get a good place in line to throw buckets of cash at you if you can provide them with an open-source software stack that comes anywhere near the 8x-60x speedup that MagLev has implied is possible. It grows even more obvious when you think about the fact that the other big win with MagLev is the OODB, something that very few Rubyists have any idea how to deal with. And Gemstone has the expertise needed to port our Rails applications from this hacky object-relational mapping model to their vastly more elegant and scalable paradigm. It would be hard for them <i>not</i> to make money in a situation where MagLev came under a reasonable Free license.</p>
include(footer.html)
